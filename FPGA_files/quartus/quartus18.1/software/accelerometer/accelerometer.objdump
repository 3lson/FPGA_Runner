
accelerometer.elf:     file format elf32-littlenios2
accelerometer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000026fc memsz 0x000026fc flags r-x
    LOAD off    0x0000371c vaddr 0x0001271c paddr 0x0001296c align 2**12
         filesz 0x00000250 memsz 0x00000250 flags rw-
    LOAD off    0x00003bbc vaddr 0x00012bbc paddr 0x00012bbc align 2**12
         filesz 0x00000000 memsz 0x00000214 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002280  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000031c  00012400  00012400  00003400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000250  0001271c  0001296c  0000371c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000214  00012bbc  00012bbc  00003bbc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00012dd0  00012dd0  0000396c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000396c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000570  00000000  00000000  00003990  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006ce8  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002811  00000000  00000000  0000abe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002c25  00000000  00000000  0000d3f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000007dc  00000000  00000000  00010020  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001dd4  00000000  00000000  000107fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003238  00000000  00000000  000125d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00015808  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000610  00000000  00000000  00015848  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001781d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00017820  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00017823  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00017824  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00017825  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001782e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00017837  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  00017840  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000022  00000000  00000000  00017852  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003e15d  00000000  00000000  00017874  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00012400 l    d  .rodata	00000000 .rodata
0001271c l    d  .rwdata	00000000 .rwdata
00012bbc l    d  .bss	00000000 .bss
00012dd0 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../accelerometer_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Lab4Challenge2.c
00012bc4 l     O .bss	00000004 i.3314
00012c0c l     O .bss	000000c4 x_read.3315
00012bc0 l     O .bss	00000004 coeff_index.3361
00012bbc l     O .bss	00000004 tap_index.3362
00012c00 l     O .bss	0000000a coeff_buffer.3360
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00011584 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000127e0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000128c0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00012268 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00012bfc g     O .bss	00000004 alt_instruction_exception_handler
00011f70 g     F .text	0000002c alt_main
000114d4 g     F .text	00000080 _puts_r
00012cd0 g     O .bss	00000100 alt_irq
0001296c g       *ABS*	00000000 __flash_rwdata_start
00011488 g     F .text	0000004c printf
00012bf4 g     O .bss	00000004 altera_avalon_timer_ts_freq
0001111c g     F .text	00000070 .hidden __fixsfsi
00012950 g     O .rwdata	00000004 jtag_uart
00012354 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
000120d4 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012be0 g     O .bss	00000004 errno
00012bec g     O .bss	00000004 alt_argv
0001a944 g       *ABS*	00000000 _gp
00011f9c g     F .text	00000004 usleep
000128ec g     O .rwdata	00000030 alt_fd_list
00012bcc g     O .bss	00000004 continuous_mode
000122dc g     F .text	00000074 alt_find_dev
00011554 g     F .text	00000014 puts
0001235c g     F .text	00000074 alt_exception_cause_generated_bad_addr
0001144c g     F .text	0000003c _printf_r
00011d40 g     F .text	00000064 .hidden __udivsi3
0001271c g     O .rwdata	000000c4 coeffs
00012954 g     O .rwdata	00000004 alt_max_fd
00011dfc g     F .text	00000094 alt_irq_register
000112b0 g     F .text	00000110 .hidden __extendsfdf2
00012944 g     O .rwdata	00000004 _global_impure_ptr
00012dd0 g       *ABS*	00000000 __bss_end
00012be4 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
0001291c g     O .rwdata	00000028 alt_dev_null
00012264 g     F .text	00000004 alt_dcache_flush_all
0001296c g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00012958 g     O .rwdata	00000008 alt_dev_list
00011fa0 g     F .text	00000060 write
00010574 g     F .text	000001e0 uart_isr
0001271c g       *ABS*	00000000 __ram_rodata_end
00012bd4 g     O .bss	00000001 led
00011da4 g     F .text	00000058 .hidden __umodsi3
00012dd0 g       *ABS*	00000000 end
00012bd0 g     O .bss	00000004 mode
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
000113c0 g     F .text	00000064 .hidden __clzsi2
00012048 g     F .text	00000034 altera_avalon_jtag_uart_write
000115f0 g     F .text	0000052c ___vfprintf_internal_r
00010180 g     F .text	0000003c _start
00012bd8 g     O .bss	00000004 level
00012020 g     F .text	00000028 alt_sys_init
00012084 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
0001118c g     F .text	00000124 .hidden __floatsisf
00011424 g     F .text	00000028 .hidden __mulsi3
0001271c g       *ABS*	00000000 __ram_rwdata_start
00012400 g       *ABS*	00000000 __ram_rodata_start
000121dc g     F .text	00000088 alt_busy_sleep
0001212c g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
000123d0 g     F .text	00000030 memcmp
00012dd0 g       *ABS*	00000000 __alt_stack_base
00012270 g     F .text	0000006c alt_dev_llist_insert
00011b38 g     F .text	000000b8 __sfvwrite_small_dev
00012bbc g       *ABS*	00000000 __bss_start
00010754 g     F .text	000000d0 main
00010384 g     F .text	00000150 string_to_float
00012be8 g     O .bss	00000004 alt_envp
00012968 g     O .rwdata	00000004 alt_errno
00011c48 g     F .text	00000084 .hidden __divsi3
00010cec g     F .text	00000430 .hidden __mulsf3
00012400 g       *ABS*	00000000 __flash_rodata_start
000104d4 g     F .text	000000a0 send_accelerometer_data
00012000 g     F .text	00000020 alt_irq_init
0001260d g     O .rodata	00000100 .hidden __clz_tab
00011bf0 g     F .text	00000058 _write_r
00012948 g     O .rwdata	00000004 _impure_ptr
00012bf0 g     O .bss	00000004 alt_argc
00012bf8 g     O .bss	00000004 altera_avalon_timer_ts_base
00010020 g       .exceptions	00000000 alt_irq_entry
00012bc8 g     O .bss	00000001 pwm
00012960 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001207c g     F .text	00000008 alt_up_accelerometer_spi_open_dev
000101bc g     F .text	00000088 LPF
0001296c g       *ABS*	00000000 _edata
00012dd0 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00011ccc g     F .text	00000074 .hidden __modsi3
00012184 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010244 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00010278 g     F .text	0000010c timer_isr
00012098 g     F .text	00000020 alt_up_accelerometer_spi_read
000120b8 g     F .text	0000001c alt_up_accelerometer_spi_write
00011568 g     F .text	0000001c strlen
00012350 g     F .text	00000004 alt_icache_flush_all
0001294c g     O .rwdata	00000004 alt_priority_mask
00011b1c g     F .text	0000001c __vfprintf_internal
00012bdc g     O .bss	00000004 acc_dev
00010824 g     F .text	000004c8 .hidden __addsf3
00011e90 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
   10000:	00400074 	movhi	at,1
   10004:	08406014 	ori	at,at,384
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:
   10020:	deffed04 	addi	sp,sp,-76
   10024:	dfc00015 	stw	ra,0(sp)
   10028:	d8400215 	stw	at,8(sp)
   1002c:	d8800315 	stw	r2,12(sp)
   10030:	d8c00415 	stw	r3,16(sp)
   10034:	d9000515 	stw	r4,20(sp)
   10038:	d9400615 	stw	r5,24(sp)
   1003c:	d9800715 	stw	r6,28(sp)
   10040:	d9c00815 	stw	r7,32(sp)
   10044:	000b307a 	rdctl	r5,estatus
   10048:	da000915 	stw	r8,36(sp)
   1004c:	da400a15 	stw	r9,40(sp)
   10050:	da800b15 	stw	r10,44(sp)
   10054:	dac00c15 	stw	r11,48(sp)
   10058:	db000d15 	stw	r12,52(sp)
   1005c:	db400e15 	stw	r13,56(sp)
   10060:	db800f15 	stw	r14,60(sp)
   10064:	dbc01015 	stw	r15,64(sp)
   10068:	d9401115 	stw	r5,68(sp)
   1006c:	ebffff04 	addi	r15,ea,-4
   10070:	dbc01215 	stw	r15,72(sp)
   10074:	0009313a 	rdctl	r4,ipending
   10078:	2880004c 	andi	r2,r5,1
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
   10084:	00100fc0 	call	100fc <alt_irq_handler>
   10088:	00000706 	br	100a8 <alt_exception+0x88>
   1008c:	df401215 	stw	ea,72(sp)
   10090:	e8bfff17 	ldw	r2,-4(ea)
   10094:	e93fff04 	addi	r4,ea,-4
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>
   100a0:	ebffff04 	addi	r15,ea,-4
   100a4:	dbc01215 	stw	r15,72(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
   100ac:	df401217 	ldw	ea,72(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)
   100b4:	2801707a 	wrctl	estatus,r5
   100b8:	d8400217 	ldw	at,8(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)
   100d4:	da000917 	ldw	r8,36(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
   100f4:	dec01304 	addi	sp,sp,76
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
   10108:	0007313a 	rdctl	r3,ipending
   1010c:	04000074 	movhi	r16,1
   10110:	840b3404 	addi	r16,r16,11472
   10114:	000b883a 	mov	r5,zero
   10118:	00800044 	movi	r2,1
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
   10150:	1085883a 	add	r2,r2,r2
   10154:	29400044 	addi	r5,r5,1
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
   1015c:	d0a0ae17 	ldw	r2,-32072(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   10174:	003da03a 	break	0
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:
   10180:	06c000b4 	movhi	sp,2
   10184:	dec00014 	ori	sp,sp,0
   10188:	06800074 	movhi	gp,1
   1018c:	d6aa5114 	ori	gp,gp,43332
   10190:	00800074 	movhi	r2,1
   10194:	108aef14 	ori	r2,r2,11196
   10198:	00c00074 	movhi	r3,1
   1019c:	18cb7414 	ori	r3,r3,11728
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>
   101a4:	10000015 	stw	zero,0(r2)
   101a8:	10800104 	addi	r2,r2,4
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
   101b0:	0011e900 	call	11e90 <alt_load>
   101b4:	0011f700 	call	11f70 <alt_main>

000101b8 <alt_after_alt_main>:
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <LPF>:
    }

    i++;
}

float LPF(alt_32 acc_read[TAPS]) {
   101bc:	defffa04 	addi	sp,sp,-24
   101c0:	dcc00315 	stw	r19,12(sp)
    float avg = 0;
    for (int i = 0; i < TAPS; i++) {
        avg += acc_read[i] * coeffs[i];  // FIR filter calculation
   101c4:	04c00074 	movhi	r19,1
    }

    i++;
}

float LPF(alt_32 acc_read[TAPS]) {
   101c8:	dd000415 	stw	r20,16(sp)
   101cc:	dc800215 	stw	r18,8(sp)
   101d0:	dc400115 	stw	r17,4(sp)
   101d4:	dc000015 	stw	r16,0(sp)
   101d8:	dfc00515 	stw	ra,20(sp)
   101dc:	2029883a 	mov	r20,r4
   101e0:	0021883a 	mov	r16,zero
    float avg = 0;
   101e4:	0023883a 	mov	r17,zero
    for (int i = 0; i < TAPS; i++) {
        avg += acc_read[i] * coeffs[i];  // FIR filter calculation
   101e8:	9cc9c704 	addi	r19,r19,10012
    i++;
}

float LPF(alt_32 acc_read[TAPS]) {
    float avg = 0;
    for (int i = 0; i < TAPS; i++) {
   101ec:	04803104 	movi	r18,196
        avg += acc_read[i] * coeffs[i];  // FIR filter calculation
   101f0:	a405883a 	add	r2,r20,r16
   101f4:	11000017 	ldw	r4,0(r2)
   101f8:	001118c0 	call	1118c <__floatsisf>
   101fc:	84c7883a 	add	r3,r16,r19
   10200:	19400017 	ldw	r5,0(r3)
   10204:	1009883a 	mov	r4,r2
   10208:	84000104 	addi	r16,r16,4
   1020c:	0010cec0 	call	10cec <__mulsf3>
   10210:	8809883a 	mov	r4,r17
   10214:	100b883a 	mov	r5,r2
   10218:	00108240 	call	10824 <__addsf3>
   1021c:	1023883a 	mov	r17,r2
    i++;
}

float LPF(alt_32 acc_read[TAPS]) {
    float avg = 0;
    for (int i = 0; i < TAPS; i++) {
   10220:	84bff31e 	bne	r16,r18,101f0 <__alt_data_end+0xffff01f0>
        avg += acc_read[i] * coeffs[i];  // FIR filter calculation
    }
    return avg;  // Return the filtered result
}
   10224:	dfc00517 	ldw	ra,20(sp)
   10228:	dd000417 	ldw	r20,16(sp)
   1022c:	dcc00317 	ldw	r19,12(sp)
   10230:	dc800217 	ldw	r18,8(sp)
   10234:	dc400117 	ldw	r17,4(sp)
   10238:	dc000017 	ldw	r16,0(sp)
   1023c:	dec00604 	addi	sp,sp,24
   10240:	f800283a 	ret

00010244 <convert_read>:

void convert_read(alt_32 acc_read, int *level, alt_u8 *led) {
    acc_read += OFFSET;
   10244:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    *led = (8 >> val) | (8 << (8 - val));
   10248:	2005d1ba 	srai	r2,r4,6
    *level = (acc_read >> 1) & 0x1f;
   1024c:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int *level, alt_u8 *led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    *led = (8 >> val) | (8 << (8 - val));
   10250:	10c001cc 	andi	r3,r2,7
   10254:	00800204 	movi	r2,8
   10258:	10cfc83a 	sub	r7,r2,r3
   1025c:	11ce983a 	sll	r7,r2,r7
   10260:	10c5d83a 	sra	r2,r2,r3
    *level = (acc_read >> 1) & 0x1f;
   10264:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int *level, alt_u8 *led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    *led = (8 >> val) | (8 << (8 - val));
   10268:	3884b03a 	or	r2,r7,r2
   1026c:	30800005 	stb	r2,0(r6)
    *level = (acc_read >> 1) & 0x1f;
   10270:	29000015 	stw	r4,0(r5)
   10274:	f800283a 	ret

00010278 <timer_isr>:
    }

    return 0;
}

void timer_isr(void *context, alt_u32 id) {
   10278:	defffe04 	addi	sp,sp,-8
    static int i = 0;
    static alt_32 x_read[TAPS] = {0};

    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   1027c:	008000b4 	movhi	r2,2
    }

    return 0;
}

void timer_isr(void *context, alt_u32 id) {
   10280:	dfc00115 	stw	ra,4(sp)
   10284:	dc000015 	stw	r16,0(sp)
    static int i = 0;
    static alt_32 x_read[TAPS] = {0};

    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10288:	10840004 	addi	r2,r2,4096
   1028c:	10000035 	stwio	zero,0(r2)

    if (i == TAPS) {
   10290:	d0e0a017 	ldw	r3,-32128(gp)
   10294:	00800c44 	movi	r2,49
   10298:	1880011e 	bne	r3,r2,102a0 <timer_isr+0x28>
        i = 0;  // Reset index once we reach TAPS
   1029c:	d020a015 	stw	zero,-32128(gp)
    }

    alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read[i]);
   102a0:	d160a017 	ldw	r5,-32128(gp)
   102a4:	04000074 	movhi	r16,1
   102a8:	d120a617 	ldw	r4,-32104(gp)
   102ac:	294b883a 	add	r5,r5,r5
   102b0:	294b883a 	add	r5,r5,r5
   102b4:	840b0304 	addi	r16,r16,11276
   102b8:	814b883a 	add	r5,r16,r5
   102bc:	00120d40 	call	120d4 <alt_up_accelerometer_spi_read_x_axis>

    float value;
    if (mode == 1) {
   102c0:	d0e0a317 	ldw	r3,-32116(gp)
   102c4:	00800044 	movi	r2,1
   102c8:	1880031e 	bne	r3,r2,102d8 <timer_isr+0x60>
        value = LPF(x_read);
   102cc:	8009883a 	mov	r4,r16
   102d0:	00101bc0 	call	101bc <LPF>
   102d4:	00000606 	br	102f0 <timer_isr+0x78>
    } else {
        value = x_read[i];
   102d8:	d120a017 	ldw	r4,-32128(gp)
   102dc:	2109883a 	add	r4,r4,r4
   102e0:	2109883a 	add	r4,r4,r4
   102e4:	8109883a 	add	r4,r16,r4
   102e8:	21000017 	ldw	r4,0(r4)
   102ec:	001118c0 	call	1118c <__floatsisf>
    }

    convert_read((alt_32)value, &level, &led);
   102f0:	1009883a 	mov	r4,r2
   102f4:	001111c0 	call	1111c <__fixsfsi>
   102f8:	d1a0a404 	addi	r6,gp,-32112
   102fc:	d160a504 	addi	r5,gp,-32108
   10300:	1009883a 	mov	r4,r2
   10304:	00102440 	call	10244 <convert_read>

    if (pwm < abs(level)) {
   10308:	d0e0a517 	ldw	r3,-32108(gp)
   1030c:	d1a0a107 	ldb	r6,-32124(gp)
   10310:	180b883a 	mov	r5,r3
   10314:	1800010e 	bge	r3,zero,1031c <timer_isr+0xa4>
   10318:	00cbc83a 	sub	r5,zero,r3
   1031c:	010000b4 	movhi	r4,2
   10320:	d0a0a403 	ldbu	r2,-32112(gp)
   10324:	21040804 	addi	r4,r4,4128
   10328:	3140040e 	bge	r6,r5,1033c <timer_isr+0xc4>
        if (level < 0) {
   1032c:	1800020e 	bge	r3,zero,10338 <timer_isr+0xc0>
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, led << 1);
   10330:	1085883a 	add	r2,r2,r2
   10334:	00000106 	br	1033c <timer_isr+0xc4>
        } else {
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, led >> 1);
   10338:	1004d07a 	srli	r2,r2,1
        }
    } else {
        IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, led);
   1033c:	20800035 	stwio	r2,0(r4)
    }

    if (pwm > PWM_PERIOD) {
   10340:	d0a0a103 	ldbu	r2,-32124(gp)
   10344:	01000404 	movi	r4,16
   10348:	10c03fcc 	andi	r3,r2,255
   1034c:	18c0201c 	xori	r3,r3,128
   10350:	18ffe004 	addi	r3,r3,-128
   10354:	20c0020e 	bge	r4,r3,10360 <timer_isr+0xe8>
        pwm = 0;
   10358:	d020a105 	stb	zero,-32124(gp)
   1035c:	00000206 	br	10368 <timer_isr+0xf0>
    } else {
        pwm++;
   10360:	10800044 	addi	r2,r2,1
   10364:	d0a0a105 	stb	r2,-32124(gp)
    }

    i++;
   10368:	d0a0a017 	ldw	r2,-32128(gp)
   1036c:	10800044 	addi	r2,r2,1
   10370:	d0a0a015 	stw	r2,-32128(gp)
}
   10374:	dfc00117 	ldw	ra,4(sp)
   10378:	dc000017 	ldw	r16,0(sp)
   1037c:	dec00204 	addi	sp,sp,8
   10380:	f800283a 	ret

00010384 <string_to_float>:
    alt_u8 val = (acc_read >> 6) & 0x07;
    *led = (8 >> val) | (8 << (8 - val));
    *level = (acc_read >> 1) & 0x1f;
}

float string_to_float(const char* str) {
   10384:	defff904 	addi	sp,sp,-28
   10388:	dc000015 	stw	r16,0(sp)
   1038c:	dfc00615 	stw	ra,24(sp)
   10390:	dd400515 	stw	r21,20(sp)
   10394:	dd000415 	stw	r20,16(sp)
   10398:	dcc00315 	stw	r19,12(sp)
   1039c:	dc800215 	stw	r18,8(sp)
   103a0:	dc400115 	stw	r17,4(sp)
    float fraction = 0.1f;
    int sign = 1;
    int i = 0;

    // Handle negative numbers
    if (str[0] == '-') {
   103a4:	20c00007 	ldb	r3,0(r4)
   103a8:	00800b44 	movi	r2,45
    alt_u8 val = (acc_read >> 6) & 0x07;
    *led = (8 >> val) | (8 << (8 - val));
    *level = (acc_read >> 1) & 0x1f;
}

float string_to_float(const char* str) {
   103ac:	2021883a 	mov	r16,r4
    float fraction = 0.1f;
    int sign = 1;
    int i = 0;

    // Handle negative numbers
    if (str[0] == '-') {
   103b0:	1880031e 	bne	r3,r2,103c0 <string_to_float+0x3c>
        sign = -1;
        i++;
   103b4:	04400044 	movi	r17,1
    int sign = 1;
    int i = 0;

    // Handle negative numbers
    if (str[0] == '-') {
        sign = -1;
   103b8:	053fffc4 	movi	r20,-1
   103bc:	00000206 	br	103c8 <string_to_float+0x44>

float string_to_float(const char* str) {
    float result = 0.0f;
    float fraction = 0.1f;
    int sign = 1;
    int i = 0;
   103c0:	0023883a 	mov	r17,zero
}

float string_to_float(const char* str) {
    float result = 0.0f;
    float fraction = 0.1f;
    int sign = 1;
   103c4:	05000044 	movi	r20,1
   103c8:	8463883a 	add	r17,r16,r17
   103cc:	0025883a 	mov	r18,zero
        sign = -1;
        i++;
    }

    // Process integer part
    while (str[i] >= '0' && str[i] <= '9') {
   103d0:	05400244 	movi	r21,9
   103d4:	8cc00003 	ldbu	r19,0(r17)
   103d8:	8c05c83a 	sub	r2,r17,r16
   103dc:	8c400044 	addi	r17,r17,1
   103e0:	98fff404 	addi	r3,r19,-48
   103e4:	9cc03fcc 	andi	r19,r19,255
   103e8:	9cc0201c 	xori	r19,r19,128
   103ec:	18c03fcc 	andi	r3,r3,255
   103f0:	9cffe004 	addi	r19,r19,-128
   103f4:	a8c00b36 	bltu	r21,r3,10424 <string_to_float+0xa0>
        result = result * 10.0f + (str[i] - '0');
   103f8:	01504834 	movhi	r5,16672
   103fc:	9009883a 	mov	r4,r18
   10400:	0010cec0 	call	10cec <__mulsf3>
   10404:	993ff404 	addi	r4,r19,-48
   10408:	1025883a 	mov	r18,r2
   1040c:	001118c0 	call	1118c <__floatsisf>
   10410:	900b883a 	mov	r5,r18
   10414:	1009883a 	mov	r4,r2
   10418:	00108240 	call	10824 <__addsf3>
   1041c:	1025883a 	mov	r18,r2
   10420:	003fec06 	br	103d4 <__alt_data_end+0xffff03d4>
        i++;
    }

    // Process fractional part
    if (str[i] == '.') {
   10424:	00c00b84 	movi	r3,46
   10428:	98c01c1e 	bne	r19,r3,1049c <string_to_float+0x118>
   1042c:	10800044 	addi	r2,r2,1
    *level = (acc_read >> 1) & 0x1f;
}

float string_to_float(const char* str) {
    float result = 0.0f;
    float fraction = 0.1f;
   10430:	044f7374 	movhi	r17,15821
   10434:	80a1883a 	add	r16,r16,r2
   10438:	8c733344 	addi	r17,r17,-13107
    }

    // Process fractional part
    if (str[i] == '.') {
        i++;
        while (str[i] >= '0' && str[i] <= '9') {
   1043c:	04c00244 	movi	r19,9
   10440:	81000003 	ldbu	r4,0(r16)
   10444:	84000044 	addi	r16,r16,1
   10448:	20bff404 	addi	r2,r4,-48
   1044c:	10803fcc 	andi	r2,r2,255
   10450:	98801236 	bltu	r19,r2,1049c <string_to_float+0x118>
            result += (str[i] - '0') * fraction;
   10454:	21003fcc 	andi	r4,r4,255
   10458:	2100201c 	xori	r4,r4,128
   1045c:	213fe004 	addi	r4,r4,-128
   10460:	213ff404 	addi	r4,r4,-48
   10464:	001118c0 	call	1118c <__floatsisf>
   10468:	880b883a 	mov	r5,r17
   1046c:	1009883a 	mov	r4,r2
   10470:	0010cec0 	call	10cec <__mulsf3>
   10474:	9009883a 	mov	r4,r18
   10478:	100b883a 	mov	r5,r2
   1047c:	00108240 	call	10824 <__addsf3>
            fraction *= 0.1f;
   10480:	014f7374 	movhi	r5,15821
   10484:	8809883a 	mov	r4,r17
   10488:	29733344 	addi	r5,r5,-13107

    // Process fractional part
    if (str[i] == '.') {
        i++;
        while (str[i] >= '0' && str[i] <= '9') {
            result += (str[i] - '0') * fraction;
   1048c:	1025883a 	mov	r18,r2
            fraction *= 0.1f;
   10490:	0010cec0 	call	10cec <__mulsf3>
   10494:	1023883a 	mov	r17,r2
   10498:	003fe906 	br	10440 <__alt_data_end+0xffff0440>
            i++;
        }
    }

    return sign * result;
   1049c:	a009883a 	mov	r4,r20
   104a0:	001118c0 	call	1118c <__floatsisf>
   104a4:	900b883a 	mov	r5,r18
   104a8:	1009883a 	mov	r4,r2
   104ac:	0010cec0 	call	10cec <__mulsf3>
}
   104b0:	dfc00617 	ldw	ra,24(sp)
   104b4:	dd400517 	ldw	r21,20(sp)
   104b8:	dd000417 	ldw	r20,16(sp)
   104bc:	dcc00317 	ldw	r19,12(sp)
   104c0:	dc800217 	ldw	r18,8(sp)
   104c4:	dc400117 	ldw	r17,4(sp)
   104c8:	dc000017 	ldw	r16,0(sp)
   104cc:	dec00704 	addi	sp,sp,28
   104d0:	f800283a 	ret

000104d4 <send_accelerometer_data>:

void send_accelerometer_data(int num_samples) {
   104d4:	defffa04 	addi	sp,sp,-24
   104d8:	dc400415 	stw	r17,16(sp)
   104dc:	2023883a 	mov	r17,r4
    printf("Starting continuous data transmission...\n");
   104e0:	01000074 	movhi	r4,1
   104e4:	21091c04 	addi	r4,r4,9328
    }

    return sign * result;
}

void send_accelerometer_data(int num_samples) {
   104e8:	dc000315 	stw	r16,12(sp)
   104ec:	dfc00515 	stw	ra,20(sp)
    printf("Starting continuous data transmission...\n");
    for (int i = 0; i <  num_samples || continuous_mode; i++){
   104f0:	0021883a 	mov	r16,zero

    return sign * result;
}

void send_accelerometer_data(int num_samples) {
    printf("Starting continuous data transmission...\n");
   104f4:	00115540 	call	11554 <puts>
    for (int i = 0; i <  num_samples || continuous_mode; i++){
   104f8:	8440130e 	bge	r16,r17,10548 <send_accelerometer_data+0x74>
        alt_32 x_read, y_read, z_read;
        alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
   104fc:	d120a617 	ldw	r4,-32104(gp)
   10500:	d9400204 	addi	r5,sp,8
    return sign * result;
}

void send_accelerometer_data(int num_samples) {
    printf("Starting continuous data transmission...\n");
    for (int i = 0; i <  num_samples || continuous_mode; i++){
   10504:	84000044 	addi	r16,r16,1
        alt_32 x_read, y_read, z_read;
        alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
   10508:	00120d40 	call	120d4 <alt_up_accelerometer_spi_read_x_axis>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, &y_read);
   1050c:	d120a617 	ldw	r4,-32104(gp)
   10510:	d9400104 	addi	r5,sp,4
   10514:	001212c0 	call	1212c <alt_up_accelerometer_spi_read_y_axis>
        alt_up_accelerometer_spi_read_z_axis(acc_dev, &z_read);
   10518:	d120a617 	ldw	r4,-32104(gp)
   1051c:	d80b883a 	mov	r5,sp
   10520:	00121840 	call	12184 <alt_up_accelerometer_spi_read_z_axis>
        printf("%ld,%ld,%ld\n", x_read, y_read, z_read);
   10524:	d9c00017 	ldw	r7,0(sp)
   10528:	d9800117 	ldw	r6,4(sp)
   1052c:	d9400217 	ldw	r5,8(sp)
   10530:	01000074 	movhi	r4,1
   10534:	21092704 	addi	r4,r4,9372
   10538:	00114880 	call	11488 <printf>
        usleep(10000); // 10ms delay between samples
   1053c:	0109c404 	movi	r4,10000
   10540:	0011f9c0 	call	11f9c <usleep>
   10544:	003fec06 	br	104f8 <__alt_data_end+0xffff04f8>
    return sign * result;
}

void send_accelerometer_data(int num_samples) {
    printf("Starting continuous data transmission...\n");
    for (int i = 0; i <  num_samples || continuous_mode; i++){
   10548:	d0a0a217 	ldw	r2,-32120(gp)
   1054c:	103feb1e 	bne	r2,zero,104fc <__alt_data_end+0xffff04fc>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, &y_read);
        alt_up_accelerometer_spi_read_z_axis(acc_dev, &z_read);
        printf("%ld,%ld,%ld\n", x_read, y_read, z_read);
        usleep(10000); // 10ms delay between samples
    }
    printf("END\n");
   10550:	01000074 	movhi	r4,1
   10554:	21092b04 	addi	r4,r4,9388
   10558:	00115540 	call	11554 <puts>
    continuous_mode = 0;
   1055c:	d020a215 	stw	zero,-32120(gp)
}
   10560:	dfc00517 	ldw	ra,20(sp)
   10564:	dc400417 	ldw	r17,16(sp)
   10568:	dc000317 	ldw	r16,12(sp)
   1056c:	dec00604 	addi	sp,sp,24
   10570:	f800283a 	ret

00010574 <uart_isr>:
void uart_isr(void *context, alt_u32 id) {
    static char coeff_buffer[MAX_COEFF_DIGITS];
    static int coeff_index = 0;
    static int tap_index = 0;

    char cmd = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE) & 0xFF;
   10574:	008000b4 	movhi	r2,2
    printf("END\n");
    continuous_mode = 0;
}


void uart_isr(void *context, alt_u32 id) {
   10578:	defffa04 	addi	sp,sp,-24
    static char coeff_buffer[MAX_COEFF_DIGITS];
    static int coeff_index = 0;
    static int tap_index = 0;

    char cmd = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE) & 0xFF;
   1057c:	10840c04 	addi	r2,r2,4144
    printf("END\n");
    continuous_mode = 0;
}


void uart_isr(void *context, alt_u32 id) {
   10580:	dfc00515 	stw	ra,20(sp)
   10584:	dc000415 	stw	r16,16(sp)
    static char coeff_buffer[MAX_COEFF_DIGITS];
    static int coeff_index = 0;
    static int tap_index = 0;

    char cmd = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE) & 0xFF;
   10588:	11000037 	ldwio	r4,0(r2)

    if (cmd == '0') {
   1058c:	00800c04 	movi	r2,48
   10590:	20c03fcc 	andi	r3,r4,255
   10594:	18c0201c 	xori	r3,r3,128
   10598:	18ffe004 	addi	r3,r3,-128
   1059c:	1880041e 	bne	r3,r2,105b0 <uart_isr+0x3c>
        mode = 0;
        printf("Mode set to 0 (unfiltered) - Current mode: Unfiltered\n");
   105a0:	01000074 	movhi	r4,1
    static int tap_index = 0;

    char cmd = IORD_ALTERA_AVALON_JTAG_UART_DATA(JTAG_UART_BASE) & 0xFF;

    if (cmd == '0') {
        mode = 0;
   105a4:	d020a315 	stw	zero,-32116(gp)
        printf("Mode set to 0 (unfiltered) - Current mode: Unfiltered\n");
   105a8:	21093204 	addi	r4,r4,9416
   105ac:	00006406 	br	10740 <uart_isr+0x1cc>
    } else if (cmd == '1') {
   105b0:	01400c44 	movi	r5,49
   105b4:	1940051e 	bne	r3,r5,105cc <uart_isr+0x58>
        mode = 1;
   105b8:	00800044 	movi	r2,1
        printf("Mode set to 1 (filtered) - Current mode: Filtered\n");
   105bc:	01000074 	movhi	r4,1

    if (cmd == '0') {
        mode = 0;
        printf("Mode set to 0 (unfiltered) - Current mode: Unfiltered\n");
    } else if (cmd == '1') {
        mode = 1;
   105c0:	d0a0a315 	stw	r2,-32116(gp)
        printf("Mode set to 1 (filtered) - Current mode: Filtered\n");
   105c4:	21094004 	addi	r4,r4,9472
   105c8:	00005d06 	br	10740 <uart_isr+0x1cc>
    } else if (cmd == 'r') {
   105cc:	01401c84 	movi	r5,114
   105d0:	1940181e 	bne	r3,r5,10634 <uart_isr+0xc0>
        alt_32 x_read, y_read, z_read;
        alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
   105d4:	d120a617 	ldw	r4,-32104(gp)
   105d8:	d9400304 	addi	r5,sp,12
   105dc:	00120d40 	call	120d4 <alt_up_accelerometer_spi_read_x_axis>
        alt_up_accelerometer_spi_read_y_axis(acc_dev, &y_read);
   105e0:	d120a617 	ldw	r4,-32104(gp)
   105e4:	d9400204 	addi	r5,sp,8
   105e8:	001212c0 	call	1212c <alt_up_accelerometer_spi_read_y_axis>
        alt_up_accelerometer_spi_read_z_axis(acc_dev, &z_read);
   105ec:	d120a617 	ldw	r4,-32104(gp)
   105f0:	d9400104 	addi	r5,sp,4
   105f4:	00121840 	call	12184 <alt_up_accelerometer_spi_read_z_axis>
        printf("Accelerometer Data: X=%ld, Y=%ld, Z=%ld - Current mode: %s\n", x_read, y_read, z_read, mode ? "Filtered" : "Unfiltered");
   105f8:	d0a0a317 	ldw	r2,-32116(gp)
   105fc:	d9400317 	ldw	r5,12(sp)
   10600:	d9800217 	ldw	r6,8(sp)
   10604:	d9c00117 	ldw	r7,4(sp)
   10608:	1000031e 	bne	r2,zero,10618 <uart_isr+0xa4>
   1060c:	00800074 	movhi	r2,1
   10610:	10892f04 	addi	r2,r2,9404
   10614:	00000206 	br	10620 <uart_isr+0xac>
   10618:	00800074 	movhi	r2,1
   1061c:	10892c04 	addi	r2,r2,9392
   10620:	01000074 	movhi	r4,1
   10624:	d8800015 	stw	r2,0(sp)
   10628:	21094d04 	addi	r4,r4,9524
   1062c:	00114880 	call	11488 <printf>
   10630:	00004406 	br	10744 <uart_isr+0x1d0>
    } else if (cmd == 'c') {
   10634:	014018c4 	movi	r5,99
   10638:	1940061e 	bne	r3,r5,10654 <uart_isr+0xe0>
        // Start receiving new coefficients
        printf("Ready to receive new coefficients\n");
   1063c:	01000074 	movhi	r4,1
   10640:	21095c04 	addi	r4,r4,9584
   10644:	00115540 	call	11554 <puts>
        coeff_index = 0;
   10648:	d0209f15 	stw	zero,-32132(gp)
        tap_index = 0;
   1064c:	d0209e15 	stw	zero,-32136(gp)
   10650:	00003c06 	br	10744 <uart_isr+0x1d0>
    } else if (cmd == 'p') {
   10654:	01401c04 	movi	r5,112
   10658:	1940091e 	bne	r3,r5,10680 <uart_isr+0x10c>
        printf("Received command: %c\n", cmd);
   1065c:	01000074 	movhi	r4,1
   10660:	180b883a 	mov	r5,r3
   10664:	21096504 	addi	r4,r4,9620
   10668:	00114880 	call	11488 <printf>
        continuous_mode = 1;
   1066c:	00800044 	movi	r2,1
        send_accelerometer_data(0);
   10670:	0009883a 	mov	r4,zero
        printf("Ready to receive new coefficients\n");
        coeff_index = 0;
        tap_index = 0;
    } else if (cmd == 'p') {
        printf("Received command: %c\n", cmd);
        continuous_mode = 1;
   10674:	d0a0a215 	stw	r2,-32120(gp)
        send_accelerometer_data(0);
   10678:	00104d40 	call	104d4 <send_accelerometer_data>
   1067c:	00003106 	br	10744 <uart_isr+0x1d0>
    } else if (cmd == 's') {
   10680:	01401cc4 	movi	r5,115
   10684:	1940041e 	bne	r3,r5,10698 <uart_isr+0x124>
        continuous_mode = 0;
        printf("Stopping continuous data transmission\n");
   10688:	01000074 	movhi	r4,1
    } else if (cmd == 'p') {
        printf("Received command: %c\n", cmd);
        continuous_mode = 1;
        send_accelerometer_data(0);
    } else if (cmd == 's') {
        continuous_mode = 0;
   1068c:	d020a215 	stw	zero,-32120(gp)
        printf("Stopping continuous data transmission\n");
   10690:	21096b04 	addi	r4,r4,9644
   10694:	00002a06 	br	10740 <uart_isr+0x1cc>
    } else if (tap_index < TAPS) {
   10698:	d4209e17 	ldw	r16,-32136(gp)
   1069c:	14002916 	blt	r2,r16,10744 <uart_isr+0x1d0>
   106a0:	01400074 	movhi	r5,1
        // Receiving coefficient data
        if (cmd == COEFF_DELIMITER || coeff_index == MAX_COEFF_DIGITS - 1) {
   106a4:	01800b04 	movi	r6,44
   106a8:	d0a09f17 	ldw	r2,-32132(gp)
   106ac:	294b0004 	addi	r5,r5,11264
   106b0:	19800226 	beq	r3,r6,106bc <uart_isr+0x148>
   106b4:	00c00244 	movi	r3,9
   106b8:	10c0181e 	bne	r2,r3,1071c <uart_isr+0x1a8>
            // End of a coefficient
            coeff_buffer[coeff_index] = '\0';
            coeffs[tap_index] = string_to_float(coeff_buffer);
   106bc:	01000074 	movhi	r4,1
        printf("Stopping continuous data transmission\n");
    } else if (tap_index < TAPS) {
        // Receiving coefficient data
        if (cmd == COEFF_DELIMITER || coeff_index == MAX_COEFF_DIGITS - 1) {
            // End of a coefficient
            coeff_buffer[coeff_index] = '\0';
   106c0:	2885883a 	add	r2,r5,r2
            coeffs[tap_index] = string_to_float(coeff_buffer);
   106c4:	210b0004 	addi	r4,r4,11264
        printf("Stopping continuous data transmission\n");
    } else if (tap_index < TAPS) {
        // Receiving coefficient data
        if (cmd == COEFF_DELIMITER || coeff_index == MAX_COEFF_DIGITS - 1) {
            // End of a coefficient
            coeff_buffer[coeff_index] = '\0';
   106c8:	10000005 	stb	zero,0(r2)
            coeffs[tap_index] = string_to_float(coeff_buffer);
   106cc:	00103840 	call	10384 <string_to_float>
   106d0:	8407883a 	add	r3,r16,r16
   106d4:	01000074 	movhi	r4,1
   106d8:	2109c704 	addi	r4,r4,10012
   106dc:	18c7883a 	add	r3,r3,r3
   106e0:	20c7883a 	add	r3,r4,r3
   106e4:	18800015 	stw	r2,0(r3)
            printf("Received coefficient %d: %f\n", tap_index, coeffs[tap_index]);
   106e8:	1009883a 	mov	r4,r2
   106ec:	00112b00 	call	112b0 <__extendsfdf2>
   106f0:	01000074 	movhi	r4,1
   106f4:	100d883a 	mov	r6,r2
   106f8:	180f883a 	mov	r7,r3
   106fc:	800b883a 	mov	r5,r16
   10700:	21097504 	addi	r4,r4,9684
   10704:	00114880 	call	11488 <printf>
            tap_index++;
   10708:	d0a09e17 	ldw	r2,-32136(gp)
            coeff_index = 0;
   1070c:	d0209f15 	stw	zero,-32132(gp)
        if (cmd == COEFF_DELIMITER || coeff_index == MAX_COEFF_DIGITS - 1) {
            // End of a coefficient
            coeff_buffer[coeff_index] = '\0';
            coeffs[tap_index] = string_to_float(coeff_buffer);
            printf("Received coefficient %d: %f\n", tap_index, coeffs[tap_index]);
            tap_index++;
   10710:	10800044 	addi	r2,r2,1
   10714:	d0a09e15 	stw	r2,-32136(gp)
            coeff_index = 0;
   10718:	00000406 	br	1072c <uart_isr+0x1b8>
        } else {
            // Add digit to current coefficient
            coeff_buffer[coeff_index++] = cmd;
   1071c:	10c00044 	addi	r3,r2,1
   10720:	2885883a 	add	r2,r5,r2
   10724:	d0e09f15 	stw	r3,-32132(gp)
   10728:	11000005 	stb	r4,0(r2)
        }

        if (tap_index == TAPS) {
   1072c:	d0e09e17 	ldw	r3,-32136(gp)
   10730:	00800c44 	movi	r2,49
   10734:	1880031e 	bne	r3,r2,10744 <uart_isr+0x1d0>
            printf("All coefficients updated\n");
   10738:	01000074 	movhi	r4,1
   1073c:	21097d04 	addi	r4,r4,9716
   10740:	00115540 	call	11554 <puts>
        }
    }
}
   10744:	dfc00517 	ldw	ra,20(sp)
   10748:	dc000417 	ldw	r16,16(sp)
   1074c:	dec00604 	addi	sp,sp,24
   10750:	f800283a 	ret

00010754 <main>:
void convert_read(alt_32 acc_read, int *level, alt_u8 *led);
void uart_isr(void *context, alt_u32 id);

int main() {
    // Initialize accelerometer
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   10754:	01000074 	movhi	r4,1
void timer_isr(void *context, alt_u32 id);
float LPF(alt_32 acc_read[TAPS]);
void convert_read(alt_32 acc_read, int *level, alt_u8 *led);
void uart_isr(void *context, alt_u32 id);

int main() {
   10758:	defffd04 	addi	sp,sp,-12
    // Initialize accelerometer
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1075c:	21090004 	addi	r4,r4,9216
void timer_isr(void *context, alt_u32 id);
float LPF(alt_32 acc_read[TAPS]);
void convert_read(alt_32 acc_read, int *level, alt_u8 *led);
void uart_isr(void *context, alt_u32 id);

int main() {
   10760:	dfc00215 	stw	ra,8(sp)
   10764:	dc400115 	stw	r17,4(sp)
   10768:	dc000015 	stw	r16,0(sp)
    // Initialize accelerometer
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   1076c:	001207c0 	call	1207c <alt_up_accelerometer_spi_open_dev>
   10770:	d0a0a615 	stw	r2,-32104(gp)
    if (acc_dev == NULL) {
   10774:	10002226 	beq	r2,zero,10800 <main+0xac>
        printf("Error: Could not open accelerometer device\n");
        return 1;
    }

    // Initialize timer
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10778:	044000b4 	movhi	r17,2
   1077c:	8c440104 	addi	r17,r17,4100
   10780:	008000c4 	movi	r2,3
   10784:	88800035 	stwio	r2,0(r17)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10788:	008000b4 	movhi	r2,2
   1078c:	10840004 	addi	r2,r2,4096
   10790:	10000035 	stwio	zero,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   10794:	008000b4 	movhi	r2,2
   10798:	10840204 	addi	r2,r2,4104
   1079c:	00c24004 	movi	r3,2304
   107a0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   107a4:	008000b4 	movhi	r2,2
   107a8:	10840304 	addi	r2,r2,4108
   107ac:	10000035 	stwio	zero,0(r2)
    alt_irq_register(TIMER_IRQ, NULL, timer_isr);
   107b0:	04000044 	movi	r16,1
   107b4:	01800074 	movhi	r6,1
   107b8:	31809e04 	addi	r6,r6,632
   107bc:	000b883a 	mov	r5,zero
   107c0:	8009883a 	mov	r4,r16
   107c4:	0011dfc0 	call	11dfc <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   107c8:	008001c4 	movi	r2,7
   107cc:	88800035 	stwio	r2,0(r17)

    // Initialize UART interrupt
    alt_irq_register(JTAG_UART_IRQ, NULL, uart_isr);
   107d0:	01800074 	movhi	r6,1
   107d4:	31815d04 	addi	r6,r6,1396
   107d8:	000b883a 	mov	r5,zero
   107dc:	0009883a 	mov	r4,zero
   107e0:	0011dfc0 	call	11dfc <alt_irq_register>
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(JTAG_UART_BASE, 0x1);
   107e4:	008000b4 	movhi	r2,2
   107e8:	10840d04 	addi	r2,r2,4148
   107ec:	14000035 	stwio	r16,0(r2)

    printf("System initialized. Waiting for commands...\n");
   107f0:	01000074 	movhi	r4,1
   107f4:	21091104 	addi	r4,r4,9284
   107f8:	00115540 	call	11554 <puts>
   107fc:	003fff06 	br	107fc <__alt_data_end+0xffff07fc>

int main() {
    // Initialize accelerometer
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
    if (acc_dev == NULL) {
        printf("Error: Could not open accelerometer device\n");
   10800:	01000074 	movhi	r4,1
   10804:	21090604 	addi	r4,r4,9240
   10808:	00115540 	call	11554 <puts>
    while (1) {
        // Main loop is empty, processing is done in interrupts
    }

    return 0;
}
   1080c:	00800044 	movi	r2,1
   10810:	dfc00217 	ldw	ra,8(sp)
   10814:	dc400117 	ldw	r17,4(sp)
   10818:	dc000017 	ldw	r16,0(sp)
   1081c:	dec00304 	addi	sp,sp,12
   10820:	f800283a 	ret

00010824 <__addsf3>:
   10824:	defffc04 	addi	sp,sp,-16
   10828:	2004d7fa 	srli	r2,r4,31
   1082c:	280cd5fa 	srli	r6,r5,23
   10830:	dc000015 	stw	r16,0(sp)
   10834:	00c02034 	movhi	r3,128
   10838:	2020d5fa 	srli	r16,r4,23
   1083c:	280ed7fa 	srli	r7,r5,31
   10840:	18ffffc4 	addi	r3,r3,-1
   10844:	dc400115 	stw	r17,4(sp)
   10848:	1908703a 	and	r4,r3,r4
   1084c:	194a703a 	and	r5,r3,r5
   10850:	dfc00315 	stw	ra,12(sp)
   10854:	dc800215 	stw	r18,8(sp)
   10858:	14403fcc 	andi	r17,r2,255
   1085c:	84003fcc 	andi	r16,r16,255
   10860:	200890fa 	slli	r4,r4,3
   10864:	31803fcc 	andi	r6,r6,255
   10868:	280a90fa 	slli	r5,r5,3
   1086c:	89c05026 	beq	r17,r7,109b0 <__addsf3+0x18c>
   10870:	8185c83a 	sub	r2,r16,r6
   10874:	00807a0e 	bge	zero,r2,10a60 <__addsf3+0x23c>
   10878:	30001e1e 	bne	r6,zero,108f4 <__addsf3+0xd0>
   1087c:	28006d1e 	bne	r5,zero,10a34 <__addsf3+0x210>
   10880:	208001cc 	andi	r2,r4,7
   10884:	10000426 	beq	r2,zero,10898 <__addsf3+0x74>
   10888:	208003cc 	andi	r2,r4,15
   1088c:	00c00104 	movi	r3,4
   10890:	10c00126 	beq	r2,r3,10898 <__addsf3+0x74>
   10894:	20c9883a 	add	r4,r4,r3
   10898:	2081002c 	andhi	r2,r4,1024
   1089c:	10003926 	beq	r2,zero,10984 <__addsf3+0x160>
   108a0:	84000044 	addi	r16,r16,1
   108a4:	00803fc4 	movi	r2,255
   108a8:	80807826 	beq	r16,r2,10a8c <__addsf3+0x268>
   108ac:	200891ba 	slli	r4,r4,6
   108b0:	8805883a 	mov	r2,r17
   108b4:	2008d27a 	srli	r4,r4,9
   108b8:	84003fcc 	andi	r16,r16,255
   108bc:	800695fa 	slli	r3,r16,23
   108c0:	10803fcc 	andi	r2,r2,255
   108c4:	04002034 	movhi	r16,128
   108c8:	843fffc4 	addi	r16,r16,-1
   108cc:	100497fa 	slli	r2,r2,31
   108d0:	2408703a 	and	r4,r4,r16
   108d4:	20e0b03a 	or	r16,r4,r3
   108d8:	8084b03a 	or	r2,r16,r2
   108dc:	dfc00317 	ldw	ra,12(sp)
   108e0:	dc800217 	ldw	r18,8(sp)
   108e4:	dc400117 	ldw	r17,4(sp)
   108e8:	dc000017 	ldw	r16,0(sp)
   108ec:	dec00404 	addi	sp,sp,16
   108f0:	f800283a 	ret
   108f4:	00c03fc4 	movi	r3,255
   108f8:	80ffe126 	beq	r16,r3,10880 <__alt_data_end+0xffff0880>
   108fc:	29410034 	orhi	r5,r5,1024
   10900:	00c006c4 	movi	r3,27
   10904:	18807516 	blt	r3,r2,10adc <__addsf3+0x2b8>
   10908:	00c00804 	movi	r3,32
   1090c:	1887c83a 	sub	r3,r3,r2
   10910:	28c6983a 	sll	r3,r5,r3
   10914:	288ad83a 	srl	r5,r5,r2
   10918:	1804c03a 	cmpne	r2,r3,zero
   1091c:	288ab03a 	or	r5,r5,r2
   10920:	2149c83a 	sub	r4,r4,r5
   10924:	2081002c 	andhi	r2,r4,1024
   10928:	10001426 	beq	r2,zero,1097c <__addsf3+0x158>
   1092c:	04810034 	movhi	r18,1024
   10930:	94bfffc4 	addi	r18,r18,-1
   10934:	24a4703a 	and	r18,r4,r18
   10938:	9009883a 	mov	r4,r18
   1093c:	00113c00 	call	113c0 <__clzsi2>
   10940:	10bffec4 	addi	r2,r2,-5
   10944:	90a4983a 	sll	r18,r18,r2
   10948:	14005416 	blt	r2,r16,10a9c <__addsf3+0x278>
   1094c:	1405c83a 	sub	r2,r2,r16
   10950:	11000044 	addi	r4,r2,1
   10954:	00800804 	movi	r2,32
   10958:	1105c83a 	sub	r2,r2,r4
   1095c:	9084983a 	sll	r2,r18,r2
   10960:	9124d83a 	srl	r18,r18,r4
   10964:	0021883a 	mov	r16,zero
   10968:	1008c03a 	cmpne	r4,r2,zero
   1096c:	9108b03a 	or	r4,r18,r4
   10970:	003fc306 	br	10880 <__alt_data_end+0xffff0880>
   10974:	1000db26 	beq	r2,zero,10ce4 <__addsf3+0x4c0>
   10978:	1009883a 	mov	r4,r2
   1097c:	208001cc 	andi	r2,r4,7
   10980:	103fc11e 	bne	r2,zero,10888 <__alt_data_end+0xffff0888>
   10984:	2006d0fa 	srli	r3,r4,3
   10988:	01003fc4 	movi	r4,255
   1098c:	8805883a 	mov	r2,r17
   10990:	8100241e 	bne	r16,r4,10a24 <__addsf3+0x200>
   10994:	18006e26 	beq	r3,zero,10b50 <__addsf3+0x32c>
   10998:	19001034 	orhi	r4,r3,64
   1099c:	00c02034 	movhi	r3,128
   109a0:	18ffffc4 	addi	r3,r3,-1
   109a4:	043fffc4 	movi	r16,-1
   109a8:	20c8703a 	and	r4,r4,r3
   109ac:	003fc206 	br	108b8 <__alt_data_end+0xffff08b8>
   109b0:	8187c83a 	sub	r3,r16,r6
   109b4:	00c03e0e 	bge	zero,r3,10ab0 <__addsf3+0x28c>
   109b8:	30002326 	beq	r6,zero,10a48 <__addsf3+0x224>
   109bc:	01803fc4 	movi	r6,255
   109c0:	81bfaf26 	beq	r16,r6,10880 <__alt_data_end+0xffff0880>
   109c4:	29410034 	orhi	r5,r5,1024
   109c8:	018006c4 	movi	r6,27
   109cc:	30c07416 	blt	r6,r3,10ba0 <__addsf3+0x37c>
   109d0:	01800804 	movi	r6,32
   109d4:	30cdc83a 	sub	r6,r6,r3
   109d8:	298c983a 	sll	r6,r5,r6
   109dc:	28cad83a 	srl	r5,r5,r3
   109e0:	3006c03a 	cmpne	r3,r6,zero
   109e4:	28cab03a 	or	r5,r5,r3
   109e8:	2149883a 	add	r4,r4,r5
   109ec:	20c1002c 	andhi	r3,r4,1024
   109f0:	183fe226 	beq	r3,zero,1097c <__alt_data_end+0xffff097c>
   109f4:	84000044 	addi	r16,r16,1
   109f8:	00c03fc4 	movi	r3,255
   109fc:	80c05426 	beq	r16,r3,10b50 <__addsf3+0x32c>
   10a00:	00bf0034 	movhi	r2,64512
   10a04:	10bfffc4 	addi	r2,r2,-1
   10a08:	20c0004c 	andi	r3,r4,1
   10a0c:	2088703a 	and	r4,r4,r2
   10a10:	2008d07a 	srli	r4,r4,1
   10a14:	20c8b03a 	or	r4,r4,r3
   10a18:	003f9906 	br	10880 <__alt_data_end+0xffff0880>
   10a1c:	0007883a 	mov	r3,zero
   10a20:	0005883a 	mov	r2,zero
   10a24:	01002034 	movhi	r4,128
   10a28:	213fffc4 	addi	r4,r4,-1
   10a2c:	1908703a 	and	r4,r3,r4
   10a30:	003fa106 	br	108b8 <__alt_data_end+0xffff08b8>
   10a34:	10bfffc4 	addi	r2,r2,-1
   10a38:	103fb926 	beq	r2,zero,10920 <__alt_data_end+0xffff0920>
   10a3c:	00c03fc4 	movi	r3,255
   10a40:	80ffaf1e 	bne	r16,r3,10900 <__alt_data_end+0xffff0900>
   10a44:	003f8e06 	br	10880 <__alt_data_end+0xffff0880>
   10a48:	283f8d26 	beq	r5,zero,10880 <__alt_data_end+0xffff0880>
   10a4c:	18ffffc4 	addi	r3,r3,-1
   10a50:	183fe526 	beq	r3,zero,109e8 <__alt_data_end+0xffff09e8>
   10a54:	01803fc4 	movi	r6,255
   10a58:	81bfdb1e 	bne	r16,r6,109c8 <__alt_data_end+0xffff09c8>
   10a5c:	003f8806 	br	10880 <__alt_data_end+0xffff0880>
   10a60:	1000201e 	bne	r2,zero,10ae4 <__addsf3+0x2c0>
   10a64:	80800044 	addi	r2,r16,1
   10a68:	10803fcc 	andi	r2,r2,255
   10a6c:	01800044 	movi	r6,1
   10a70:	3080450e 	bge	r6,r2,10b88 <__addsf3+0x364>
   10a74:	2165c83a 	sub	r18,r4,r5
   10a78:	90c1002c 	andhi	r3,r18,1024
   10a7c:	18002b26 	beq	r3,zero,10b2c <__addsf3+0x308>
   10a80:	2925c83a 	sub	r18,r5,r4
   10a84:	3823883a 	mov	r17,r7
   10a88:	003fab06 	br	10938 <__alt_data_end+0xffff0938>
   10a8c:	8805883a 	mov	r2,r17
   10a90:	043fffc4 	movi	r16,-1
   10a94:	0009883a 	mov	r4,zero
   10a98:	003f8706 	br	108b8 <__alt_data_end+0xffff08b8>
   10a9c:	013f0034 	movhi	r4,64512
   10aa0:	213fffc4 	addi	r4,r4,-1
   10aa4:	80a1c83a 	sub	r16,r16,r2
   10aa8:	9108703a 	and	r4,r18,r4
   10aac:	003f7406 	br	10880 <__alt_data_end+0xffff0880>
   10ab0:	1800411e 	bne	r3,zero,10bb8 <__addsf3+0x394>
   10ab4:	80c00044 	addi	r3,r16,1
   10ab8:	19c03fcc 	andi	r7,r3,255
   10abc:	01800044 	movi	r6,1
   10ac0:	31c0260e 	bge	r6,r7,10b5c <__addsf3+0x338>
   10ac4:	01803fc4 	movi	r6,255
   10ac8:	19802126 	beq	r3,r6,10b50 <__addsf3+0x32c>
   10acc:	2149883a 	add	r4,r4,r5
   10ad0:	2008d07a 	srli	r4,r4,1
   10ad4:	1821883a 	mov	r16,r3
   10ad8:	003f6906 	br	10880 <__alt_data_end+0xffff0880>
   10adc:	01400044 	movi	r5,1
   10ae0:	003f8f06 	br	10920 <__alt_data_end+0xffff0920>
   10ae4:	8000151e 	bne	r16,zero,10b3c <__addsf3+0x318>
   10ae8:	20002f26 	beq	r4,zero,10ba8 <__addsf3+0x384>
   10aec:	0084303a 	nor	r2,zero,r2
   10af0:	10000a26 	beq	r2,zero,10b1c <__addsf3+0x2f8>
   10af4:	00c03fc4 	movi	r3,255
   10af8:	30c02b26 	beq	r6,r3,10ba8 <__addsf3+0x384>
   10afc:	00c006c4 	movi	r3,27
   10b00:	18806d16 	blt	r3,r2,10cb8 <__addsf3+0x494>
   10b04:	00c00804 	movi	r3,32
   10b08:	1887c83a 	sub	r3,r3,r2
   10b0c:	20c6983a 	sll	r3,r4,r3
   10b10:	2084d83a 	srl	r2,r4,r2
   10b14:	1808c03a 	cmpne	r4,r3,zero
   10b18:	1108b03a 	or	r4,r2,r4
   10b1c:	2909c83a 	sub	r4,r5,r4
   10b20:	3021883a 	mov	r16,r6
   10b24:	3823883a 	mov	r17,r7
   10b28:	003f7e06 	br	10924 <__alt_data_end+0xffff0924>
   10b2c:	903f821e 	bne	r18,zero,10938 <__alt_data_end+0xffff0938>
   10b30:	0005883a 	mov	r2,zero
   10b34:	0021883a 	mov	r16,zero
   10b38:	003fba06 	br	10a24 <__alt_data_end+0xffff0a24>
   10b3c:	00c03fc4 	movi	r3,255
   10b40:	30c01926 	beq	r6,r3,10ba8 <__addsf3+0x384>
   10b44:	0085c83a 	sub	r2,zero,r2
   10b48:	21010034 	orhi	r4,r4,1024
   10b4c:	003feb06 	br	10afc <__alt_data_end+0xffff0afc>
   10b50:	043fffc4 	movi	r16,-1
   10b54:	0009883a 	mov	r4,zero
   10b58:	003f5706 	br	108b8 <__alt_data_end+0xffff08b8>
   10b5c:	80004a1e 	bne	r16,zero,10c88 <__addsf3+0x464>
   10b60:	20005926 	beq	r4,zero,10cc8 <__addsf3+0x4a4>
   10b64:	283f4626 	beq	r5,zero,10880 <__alt_data_end+0xffff0880>
   10b68:	2149883a 	add	r4,r4,r5
   10b6c:	2081002c 	andhi	r2,r4,1024
   10b70:	103f8226 	beq	r2,zero,1097c <__alt_data_end+0xffff097c>
   10b74:	00bf0034 	movhi	r2,64512
   10b78:	10bfffc4 	addi	r2,r2,-1
   10b7c:	3021883a 	mov	r16,r6
   10b80:	2088703a 	and	r4,r4,r2
   10b84:	003f3e06 	br	10880 <__alt_data_end+0xffff0880>
   10b88:	8000121e 	bne	r16,zero,10bd4 <__addsf3+0x3b0>
   10b8c:	2000261e 	bne	r4,zero,10c28 <__addsf3+0x404>
   10b90:	283fa226 	beq	r5,zero,10a1c <__alt_data_end+0xffff0a1c>
   10b94:	2809883a 	mov	r4,r5
   10b98:	3823883a 	mov	r17,r7
   10b9c:	003f3806 	br	10880 <__alt_data_end+0xffff0880>
   10ba0:	01400044 	movi	r5,1
   10ba4:	003f9006 	br	109e8 <__alt_data_end+0xffff09e8>
   10ba8:	2809883a 	mov	r4,r5
   10bac:	3021883a 	mov	r16,r6
   10bb0:	3823883a 	mov	r17,r7
   10bb4:	003f3206 	br	10880 <__alt_data_end+0xffff0880>
   10bb8:	80000c1e 	bne	r16,zero,10bec <__addsf3+0x3c8>
   10bbc:	20002f26 	beq	r4,zero,10c7c <__addsf3+0x458>
   10bc0:	00c6303a 	nor	r3,zero,r3
   10bc4:	18002b1e 	bne	r3,zero,10c74 <__addsf3+0x450>
   10bc8:	2149883a 	add	r4,r4,r5
   10bcc:	3021883a 	mov	r16,r6
   10bd0:	003f8606 	br	109ec <__alt_data_end+0xffff09ec>
   10bd4:	20001b1e 	bne	r4,zero,10c44 <__addsf3+0x420>
   10bd8:	28003926 	beq	r5,zero,10cc0 <__addsf3+0x49c>
   10bdc:	2809883a 	mov	r4,r5
   10be0:	3823883a 	mov	r17,r7
   10be4:	04003fc4 	movi	r16,255
   10be8:	003f2506 	br	10880 <__alt_data_end+0xffff0880>
   10bec:	01c03fc4 	movi	r7,255
   10bf0:	31c02226 	beq	r6,r7,10c7c <__addsf3+0x458>
   10bf4:	00c7c83a 	sub	r3,zero,r3
   10bf8:	21010034 	orhi	r4,r4,1024
   10bfc:	01c006c4 	movi	r7,27
   10c00:	38c03616 	blt	r7,r3,10cdc <__addsf3+0x4b8>
   10c04:	01c00804 	movi	r7,32
   10c08:	38cfc83a 	sub	r7,r7,r3
   10c0c:	21ce983a 	sll	r7,r4,r7
   10c10:	20c6d83a 	srl	r3,r4,r3
   10c14:	3808c03a 	cmpne	r4,r7,zero
   10c18:	1906b03a 	or	r3,r3,r4
   10c1c:	1949883a 	add	r4,r3,r5
   10c20:	3021883a 	mov	r16,r6
   10c24:	003f7106 	br	109ec <__alt_data_end+0xffff09ec>
   10c28:	283f1526 	beq	r5,zero,10880 <__alt_data_end+0xffff0880>
   10c2c:	2145c83a 	sub	r2,r4,r5
   10c30:	10c1002c 	andhi	r3,r2,1024
   10c34:	183f4f26 	beq	r3,zero,10974 <__alt_data_end+0xffff0974>
   10c38:	2909c83a 	sub	r4,r5,r4
   10c3c:	3823883a 	mov	r17,r7
   10c40:	003f0f06 	br	10880 <__alt_data_end+0xffff0880>
   10c44:	28001a26 	beq	r5,zero,10cb0 <__addsf3+0x48c>
   10c48:	2008d0fa 	srli	r4,r4,3
   10c4c:	2080102c 	andhi	r2,r4,64
   10c50:	10000526 	beq	r2,zero,10c68 <__addsf3+0x444>
   10c54:	280ad0fa 	srli	r5,r5,3
   10c58:	2880102c 	andhi	r2,r5,64
   10c5c:	1000021e 	bne	r2,zero,10c68 <__addsf3+0x444>
   10c60:	2809883a 	mov	r4,r5
   10c64:	3823883a 	mov	r17,r7
   10c68:	200890fa 	slli	r4,r4,3
   10c6c:	04003fc4 	movi	r16,255
   10c70:	003f0306 	br	10880 <__alt_data_end+0xffff0880>
   10c74:	01c03fc4 	movi	r7,255
   10c78:	31ffe01e 	bne	r6,r7,10bfc <__alt_data_end+0xffff0bfc>
   10c7c:	2809883a 	mov	r4,r5
   10c80:	3021883a 	mov	r16,r6
   10c84:	003efe06 	br	10880 <__alt_data_end+0xffff0880>
   10c88:	20001126 	beq	r4,zero,10cd0 <__addsf3+0x4ac>
   10c8c:	28000826 	beq	r5,zero,10cb0 <__addsf3+0x48c>
   10c90:	2008d0fa 	srli	r4,r4,3
   10c94:	2080102c 	andhi	r2,r4,64
   10c98:	103ff326 	beq	r2,zero,10c68 <__alt_data_end+0xffff0c68>
   10c9c:	280ad0fa 	srli	r5,r5,3
   10ca0:	2880102c 	andhi	r2,r5,64
   10ca4:	103ff01e 	bne	r2,zero,10c68 <__alt_data_end+0xffff0c68>
   10ca8:	2809883a 	mov	r4,r5
   10cac:	003fee06 	br	10c68 <__alt_data_end+0xffff0c68>
   10cb0:	04003fc4 	movi	r16,255
   10cb4:	003ef206 	br	10880 <__alt_data_end+0xffff0880>
   10cb8:	01000044 	movi	r4,1
   10cbc:	003f9706 	br	10b1c <__alt_data_end+0xffff0b1c>
   10cc0:	0005883a 	mov	r2,zero
   10cc4:	003f3406 	br	10998 <__alt_data_end+0xffff0998>
   10cc8:	2809883a 	mov	r4,r5
   10ccc:	003eec06 	br	10880 <__alt_data_end+0xffff0880>
   10cd0:	2809883a 	mov	r4,r5
   10cd4:	04003fc4 	movi	r16,255
   10cd8:	003ee906 	br	10880 <__alt_data_end+0xffff0880>
   10cdc:	00c00044 	movi	r3,1
   10ce0:	003fce06 	br	10c1c <__alt_data_end+0xffff0c1c>
   10ce4:	0005883a 	mov	r2,zero
   10ce8:	003f4e06 	br	10a24 <__alt_data_end+0xffff0a24>

00010cec <__mulsf3>:
   10cec:	defff504 	addi	sp,sp,-44
   10cf0:	dc000115 	stw	r16,4(sp)
   10cf4:	2020d5fa 	srli	r16,r4,23
   10cf8:	dd400615 	stw	r21,24(sp)
   10cfc:	202ad7fa 	srli	r21,r4,31
   10d00:	dc800315 	stw	r18,12(sp)
   10d04:	04802034 	movhi	r18,128
   10d08:	df000915 	stw	fp,36(sp)
   10d0c:	dd000515 	stw	r20,20(sp)
   10d10:	94bfffc4 	addi	r18,r18,-1
   10d14:	dfc00a15 	stw	ra,40(sp)
   10d18:	ddc00815 	stw	r23,32(sp)
   10d1c:	dd800715 	stw	r22,28(sp)
   10d20:	dcc00415 	stw	r19,16(sp)
   10d24:	dc400215 	stw	r17,8(sp)
   10d28:	84003fcc 	andi	r16,r16,255
   10d2c:	9124703a 	and	r18,r18,r4
   10d30:	a829883a 	mov	r20,r21
   10d34:	af003fcc 	andi	fp,r21,255
   10d38:	80005426 	beq	r16,zero,10e8c <__mulsf3+0x1a0>
   10d3c:	00803fc4 	movi	r2,255
   10d40:	80802f26 	beq	r16,r2,10e00 <__mulsf3+0x114>
   10d44:	91002034 	orhi	r4,r18,128
   10d48:	202490fa 	slli	r18,r4,3
   10d4c:	843fe044 	addi	r16,r16,-127
   10d50:	0023883a 	mov	r17,zero
   10d54:	002f883a 	mov	r23,zero
   10d58:	2804d5fa 	srli	r2,r5,23
   10d5c:	282cd7fa 	srli	r22,r5,31
   10d60:	01002034 	movhi	r4,128
   10d64:	213fffc4 	addi	r4,r4,-1
   10d68:	10803fcc 	andi	r2,r2,255
   10d6c:	2166703a 	and	r19,r4,r5
   10d70:	b1803fcc 	andi	r6,r22,255
   10d74:	10004c26 	beq	r2,zero,10ea8 <__mulsf3+0x1bc>
   10d78:	00c03fc4 	movi	r3,255
   10d7c:	10c04726 	beq	r2,r3,10e9c <__mulsf3+0x1b0>
   10d80:	99002034 	orhi	r4,r19,128
   10d84:	202690fa 	slli	r19,r4,3
   10d88:	10bfe044 	addi	r2,r2,-127
   10d8c:	0007883a 	mov	r3,zero
   10d90:	80a1883a 	add	r16,r16,r2
   10d94:	010003c4 	movi	r4,15
   10d98:	1c44b03a 	or	r2,r3,r17
   10d9c:	b56af03a 	xor	r21,r22,r21
   10da0:	81c00044 	addi	r7,r16,1
   10da4:	20806b36 	bltu	r4,r2,10f54 <__mulsf3+0x268>
   10da8:	100490ba 	slli	r2,r2,2
   10dac:	01000074 	movhi	r4,1
   10db0:	21037004 	addi	r4,r4,3520
   10db4:	1105883a 	add	r2,r2,r4
   10db8:	10800017 	ldw	r2,0(r2)
   10dbc:	1000683a 	jmp	r2
   10dc0:	00010f54 	movui	zero,1085
   10dc4:	00010e14 	movui	zero,1080
   10dc8:	00010e14 	movui	zero,1080
   10dcc:	00010e10 	cmplti	zero,zero,1080
   10dd0:	00010f38 	rdprs	zero,zero,1084
   10dd4:	00010f38 	rdprs	zero,zero,1084
   10dd8:	00010f24 	muli	zero,zero,1084
   10ddc:	00010e10 	cmplti	zero,zero,1080
   10de0:	00010f38 	rdprs	zero,zero,1084
   10de4:	00010f24 	muli	zero,zero,1084
   10de8:	00010f38 	rdprs	zero,zero,1084
   10dec:	00010e10 	cmplti	zero,zero,1080
   10df0:	00010f44 	movi	zero,1085
   10df4:	00010f44 	movi	zero,1085
   10df8:	00010f44 	movi	zero,1085
   10dfc:	00011054 	movui	zero,1089
   10e00:	90003b1e 	bne	r18,zero,10ef0 <__mulsf3+0x204>
   10e04:	04400204 	movi	r17,8
   10e08:	05c00084 	movi	r23,2
   10e0c:	003fd206 	br	10d58 <__alt_data_end+0xffff0d58>
   10e10:	302b883a 	mov	r21,r6
   10e14:	00800084 	movi	r2,2
   10e18:	18802626 	beq	r3,r2,10eb4 <__mulsf3+0x1c8>
   10e1c:	008000c4 	movi	r2,3
   10e20:	1880b826 	beq	r3,r2,11104 <__mulsf3+0x418>
   10e24:	00800044 	movi	r2,1
   10e28:	1880af1e 	bne	r3,r2,110e8 <__mulsf3+0x3fc>
   10e2c:	a829883a 	mov	r20,r21
   10e30:	0007883a 	mov	r3,zero
   10e34:	0009883a 	mov	r4,zero
   10e38:	18803fcc 	andi	r2,r3,255
   10e3c:	100695fa 	slli	r3,r2,23
   10e40:	a0803fcc 	andi	r2,r20,255
   10e44:	100a97fa 	slli	r5,r2,31
   10e48:	00802034 	movhi	r2,128
   10e4c:	10bfffc4 	addi	r2,r2,-1
   10e50:	2084703a 	and	r2,r4,r2
   10e54:	10c4b03a 	or	r2,r2,r3
   10e58:	1144b03a 	or	r2,r2,r5
   10e5c:	dfc00a17 	ldw	ra,40(sp)
   10e60:	df000917 	ldw	fp,36(sp)
   10e64:	ddc00817 	ldw	r23,32(sp)
   10e68:	dd800717 	ldw	r22,28(sp)
   10e6c:	dd400617 	ldw	r21,24(sp)
   10e70:	dd000517 	ldw	r20,20(sp)
   10e74:	dcc00417 	ldw	r19,16(sp)
   10e78:	dc800317 	ldw	r18,12(sp)
   10e7c:	dc400217 	ldw	r17,8(sp)
   10e80:	dc000117 	ldw	r16,4(sp)
   10e84:	dec00b04 	addi	sp,sp,44
   10e88:	f800283a 	ret
   10e8c:	90000d1e 	bne	r18,zero,10ec4 <__mulsf3+0x1d8>
   10e90:	04400104 	movi	r17,4
   10e94:	05c00044 	movi	r23,1
   10e98:	003faf06 	br	10d58 <__alt_data_end+0xffff0d58>
   10e9c:	9806c03a 	cmpne	r3,r19,zero
   10ea0:	18c00084 	addi	r3,r3,2
   10ea4:	003fba06 	br	10d90 <__alt_data_end+0xffff0d90>
   10ea8:	9800141e 	bne	r19,zero,10efc <__mulsf3+0x210>
   10eac:	00c00044 	movi	r3,1
   10eb0:	003fb706 	br	10d90 <__alt_data_end+0xffff0d90>
   10eb4:	a829883a 	mov	r20,r21
   10eb8:	00ffffc4 	movi	r3,-1
   10ebc:	0009883a 	mov	r4,zero
   10ec0:	003fdd06 	br	10e38 <__alt_data_end+0xffff0e38>
   10ec4:	9009883a 	mov	r4,r18
   10ec8:	d9400015 	stw	r5,0(sp)
   10ecc:	00113c00 	call	113c0 <__clzsi2>
   10ed0:	10fffec4 	addi	r3,r2,-5
   10ed4:	10801d84 	addi	r2,r2,118
   10ed8:	90e4983a 	sll	r18,r18,r3
   10edc:	00a1c83a 	sub	r16,zero,r2
   10ee0:	0023883a 	mov	r17,zero
   10ee4:	002f883a 	mov	r23,zero
   10ee8:	d9400017 	ldw	r5,0(sp)
   10eec:	003f9a06 	br	10d58 <__alt_data_end+0xffff0d58>
   10ef0:	04400304 	movi	r17,12
   10ef4:	05c000c4 	movi	r23,3
   10ef8:	003f9706 	br	10d58 <__alt_data_end+0xffff0d58>
   10efc:	9809883a 	mov	r4,r19
   10f00:	d9800015 	stw	r6,0(sp)
   10f04:	00113c00 	call	113c0 <__clzsi2>
   10f08:	10fffec4 	addi	r3,r2,-5
   10f0c:	10801d84 	addi	r2,r2,118
   10f10:	98e6983a 	sll	r19,r19,r3
   10f14:	0085c83a 	sub	r2,zero,r2
   10f18:	0007883a 	mov	r3,zero
   10f1c:	d9800017 	ldw	r6,0(sp)
   10f20:	003f9b06 	br	10d90 <__alt_data_end+0xffff0d90>
   10f24:	01002034 	movhi	r4,128
   10f28:	0029883a 	mov	r20,zero
   10f2c:	213fffc4 	addi	r4,r4,-1
   10f30:	00ffffc4 	movi	r3,-1
   10f34:	003fc006 	br	10e38 <__alt_data_end+0xffff0e38>
   10f38:	9027883a 	mov	r19,r18
   10f3c:	b807883a 	mov	r3,r23
   10f40:	003fb406 	br	10e14 <__alt_data_end+0xffff0e14>
   10f44:	9027883a 	mov	r19,r18
   10f48:	e02b883a 	mov	r21,fp
   10f4c:	b807883a 	mov	r3,r23
   10f50:	003fb006 	br	10e14 <__alt_data_end+0xffff0e14>
   10f54:	9028d43a 	srli	r20,r18,16
   10f58:	982cd43a 	srli	r22,r19,16
   10f5c:	94bfffcc 	andi	r18,r18,65535
   10f60:	9cffffcc 	andi	r19,r19,65535
   10f64:	980b883a 	mov	r5,r19
   10f68:	9009883a 	mov	r4,r18
   10f6c:	d9c00015 	stw	r7,0(sp)
   10f70:	00114240 	call	11424 <__mulsi3>
   10f74:	a00b883a 	mov	r5,r20
   10f78:	9809883a 	mov	r4,r19
   10f7c:	1023883a 	mov	r17,r2
   10f80:	00114240 	call	11424 <__mulsi3>
   10f84:	a009883a 	mov	r4,r20
   10f88:	b00b883a 	mov	r5,r22
   10f8c:	1027883a 	mov	r19,r2
   10f90:	00114240 	call	11424 <__mulsi3>
   10f94:	b00b883a 	mov	r5,r22
   10f98:	9009883a 	mov	r4,r18
   10f9c:	1029883a 	mov	r20,r2
   10fa0:	00114240 	call	11424 <__mulsi3>
   10fa4:	8806d43a 	srli	r3,r17,16
   10fa8:	14c5883a 	add	r2,r2,r19
   10fac:	d9c00017 	ldw	r7,0(sp)
   10fb0:	1885883a 	add	r2,r3,r2
   10fb4:	14c0022e 	bgeu	r2,r19,10fc0 <__mulsf3+0x2d4>
   10fb8:	00c00074 	movhi	r3,1
   10fbc:	a0e9883a 	add	r20,r20,r3
   10fc0:	1026943a 	slli	r19,r2,16
   10fc4:	8c7fffcc 	andi	r17,r17,65535
   10fc8:	1004d43a 	srli	r2,r2,16
   10fcc:	9c63883a 	add	r17,r19,r17
   10fd0:	882691ba 	slli	r19,r17,6
   10fd4:	1505883a 	add	r2,r2,r20
   10fd8:	8822d6ba 	srli	r17,r17,26
   10fdc:	100891ba 	slli	r4,r2,6
   10fe0:	9826c03a 	cmpne	r19,r19,zero
   10fe4:	9c62b03a 	or	r17,r19,r17
   10fe8:	8926b03a 	or	r19,r17,r4
   10fec:	9882002c 	andhi	r2,r19,2048
   10ff0:	10000426 	beq	r2,zero,11004 <__mulsf3+0x318>
   10ff4:	9804d07a 	srli	r2,r19,1
   10ff8:	9900004c 	andi	r4,r19,1
   10ffc:	3821883a 	mov	r16,r7
   11000:	1126b03a 	or	r19,r2,r4
   11004:	80c01fc4 	addi	r3,r16,127
   11008:	00c0210e 	bge	zero,r3,11090 <__mulsf3+0x3a4>
   1100c:	988001cc 	andi	r2,r19,7
   11010:	10000426 	beq	r2,zero,11024 <__mulsf3+0x338>
   11014:	988003cc 	andi	r2,r19,15
   11018:	01000104 	movi	r4,4
   1101c:	11000126 	beq	r2,r4,11024 <__mulsf3+0x338>
   11020:	9927883a 	add	r19,r19,r4
   11024:	9882002c 	andhi	r2,r19,2048
   11028:	10000426 	beq	r2,zero,1103c <__mulsf3+0x350>
   1102c:	00be0034 	movhi	r2,63488
   11030:	10bfffc4 	addi	r2,r2,-1
   11034:	80c02004 	addi	r3,r16,128
   11038:	98a6703a 	and	r19,r19,r2
   1103c:	00803f84 	movi	r2,254
   11040:	10ff9c16 	blt	r2,r3,10eb4 <__alt_data_end+0xffff0eb4>
   11044:	980891ba 	slli	r4,r19,6
   11048:	a829883a 	mov	r20,r21
   1104c:	2008d27a 	srli	r4,r4,9
   11050:	003f7906 	br	10e38 <__alt_data_end+0xffff0e38>
   11054:	9080102c 	andhi	r2,r18,64
   11058:	10000826 	beq	r2,zero,1107c <__mulsf3+0x390>
   1105c:	9880102c 	andhi	r2,r19,64
   11060:	1000061e 	bne	r2,zero,1107c <__mulsf3+0x390>
   11064:	00802034 	movhi	r2,128
   11068:	99001034 	orhi	r4,r19,64
   1106c:	10bfffc4 	addi	r2,r2,-1
   11070:	b029883a 	mov	r20,r22
   11074:	2088703a 	and	r4,r4,r2
   11078:	003fad06 	br	10f30 <__alt_data_end+0xffff0f30>
   1107c:	00802034 	movhi	r2,128
   11080:	91001034 	orhi	r4,r18,64
   11084:	10bfffc4 	addi	r2,r2,-1
   11088:	2088703a 	and	r4,r4,r2
   1108c:	003fa806 	br	10f30 <__alt_data_end+0xffff0f30>
   11090:	00800044 	movi	r2,1
   11094:	10c7c83a 	sub	r3,r2,r3
   11098:	008006c4 	movi	r2,27
   1109c:	10ff6316 	blt	r2,r3,10e2c <__alt_data_end+0xffff0e2c>
   110a0:	00800804 	movi	r2,32
   110a4:	10c5c83a 	sub	r2,r2,r3
   110a8:	9884983a 	sll	r2,r19,r2
   110ac:	98c6d83a 	srl	r3,r19,r3
   110b0:	1004c03a 	cmpne	r2,r2,zero
   110b4:	1884b03a 	or	r2,r3,r2
   110b8:	10c001cc 	andi	r3,r2,7
   110bc:	18000426 	beq	r3,zero,110d0 <__mulsf3+0x3e4>
   110c0:	10c003cc 	andi	r3,r2,15
   110c4:	01000104 	movi	r4,4
   110c8:	19000126 	beq	r3,r4,110d0 <__mulsf3+0x3e4>
   110cc:	1105883a 	add	r2,r2,r4
   110d0:	10c1002c 	andhi	r3,r2,1024
   110d4:	18000626 	beq	r3,zero,110f0 <__mulsf3+0x404>
   110d8:	a829883a 	mov	r20,r21
   110dc:	00c00044 	movi	r3,1
   110e0:	0009883a 	mov	r4,zero
   110e4:	003f5406 	br	10e38 <__alt_data_end+0xffff0e38>
   110e8:	3821883a 	mov	r16,r7
   110ec:	003fc506 	br	11004 <__alt_data_end+0xffff1004>
   110f0:	100491ba 	slli	r2,r2,6
   110f4:	a829883a 	mov	r20,r21
   110f8:	0007883a 	mov	r3,zero
   110fc:	1008d27a 	srli	r4,r2,9
   11100:	003f4d06 	br	10e38 <__alt_data_end+0xffff0e38>
   11104:	00802034 	movhi	r2,128
   11108:	99001034 	orhi	r4,r19,64
   1110c:	10bfffc4 	addi	r2,r2,-1
   11110:	a829883a 	mov	r20,r21
   11114:	2088703a 	and	r4,r4,r2
   11118:	003f8506 	br	10f30 <__alt_data_end+0xffff0f30>

0001111c <__fixsfsi>:
   1111c:	200ad5fa 	srli	r5,r4,23
   11120:	00c02034 	movhi	r3,128
   11124:	18ffffc4 	addi	r3,r3,-1
   11128:	29403fcc 	andi	r5,r5,255
   1112c:	00801f84 	movi	r2,126
   11130:	1906703a 	and	r3,r3,r4
   11134:	2008d7fa 	srli	r4,r4,31
   11138:	11400e0e 	bge	r2,r5,11174 <__fixsfsi+0x58>
   1113c:	00802744 	movi	r2,157
   11140:	11400816 	blt	r2,r5,11164 <__fixsfsi+0x48>
   11144:	00802544 	movi	r2,149
   11148:	18c02034 	orhi	r3,r3,128
   1114c:	11400b0e 	bge	r2,r5,1117c <__fixsfsi+0x60>
   11150:	28bfda84 	addi	r2,r5,-150
   11154:	1884983a 	sll	r2,r3,r2
   11158:	20000726 	beq	r4,zero,11178 <__fixsfsi+0x5c>
   1115c:	0085c83a 	sub	r2,zero,r2
   11160:	f800283a 	ret
   11164:	00a00034 	movhi	r2,32768
   11168:	10bfffc4 	addi	r2,r2,-1
   1116c:	2085883a 	add	r2,r4,r2
   11170:	f800283a 	ret
   11174:	0005883a 	mov	r2,zero
   11178:	f800283a 	ret
   1117c:	00802584 	movi	r2,150
   11180:	1145c83a 	sub	r2,r2,r5
   11184:	1884d83a 	srl	r2,r3,r2
   11188:	003ff306 	br	11158 <__alt_data_end+0xffff1158>

0001118c <__floatsisf>:
   1118c:	defffd04 	addi	sp,sp,-12
   11190:	dfc00215 	stw	ra,8(sp)
   11194:	dc400115 	stw	r17,4(sp)
   11198:	dc000015 	stw	r16,0(sp)
   1119c:	20003526 	beq	r4,zero,11274 <__floatsisf+0xe8>
   111a0:	2021883a 	mov	r16,r4
   111a4:	2022d7fa 	srli	r17,r4,31
   111a8:	20003616 	blt	r4,zero,11284 <__floatsisf+0xf8>
   111ac:	8009883a 	mov	r4,r16
   111b0:	00113c00 	call	113c0 <__clzsi2>
   111b4:	00c02784 	movi	r3,158
   111b8:	1887c83a 	sub	r3,r3,r2
   111bc:	01002584 	movi	r4,150
   111c0:	20c01416 	blt	r4,r3,11214 <__floatsisf+0x88>
   111c4:	20c9c83a 	sub	r4,r4,r3
   111c8:	8120983a 	sll	r16,r16,r4
   111cc:	00802034 	movhi	r2,128
   111d0:	10bfffc4 	addi	r2,r2,-1
   111d4:	8809883a 	mov	r4,r17
   111d8:	80a0703a 	and	r16,r16,r2
   111dc:	18803fcc 	andi	r2,r3,255
   111e0:	100695fa 	slli	r3,r2,23
   111e4:	20803fcc 	andi	r2,r4,255
   111e8:	100897fa 	slli	r4,r2,31
   111ec:	00802034 	movhi	r2,128
   111f0:	10bfffc4 	addi	r2,r2,-1
   111f4:	8084703a 	and	r2,r16,r2
   111f8:	10c4b03a 	or	r2,r2,r3
   111fc:	1104b03a 	or	r2,r2,r4
   11200:	dfc00217 	ldw	ra,8(sp)
   11204:	dc400117 	ldw	r17,4(sp)
   11208:	dc000017 	ldw	r16,0(sp)
   1120c:	dec00304 	addi	sp,sp,12
   11210:	f800283a 	ret
   11214:	01002644 	movi	r4,153
   11218:	20c01c16 	blt	r4,r3,1128c <__floatsisf+0x100>
   1121c:	20c9c83a 	sub	r4,r4,r3
   11220:	8120983a 	sll	r16,r16,r4
   11224:	013f0034 	movhi	r4,64512
   11228:	213fffc4 	addi	r4,r4,-1
   1122c:	814001cc 	andi	r5,r16,7
   11230:	8108703a 	and	r4,r16,r4
   11234:	28000426 	beq	r5,zero,11248 <__floatsisf+0xbc>
   11238:	840003cc 	andi	r16,r16,15
   1123c:	01400104 	movi	r5,4
   11240:	81400126 	beq	r16,r5,11248 <__floatsisf+0xbc>
   11244:	2149883a 	add	r4,r4,r5
   11248:	2141002c 	andhi	r5,r4,1024
   1124c:	28000526 	beq	r5,zero,11264 <__floatsisf+0xd8>
   11250:	00c027c4 	movi	r3,159
   11254:	1887c83a 	sub	r3,r3,r2
   11258:	00bf0034 	movhi	r2,64512
   1125c:	10bfffc4 	addi	r2,r2,-1
   11260:	2088703a 	and	r4,r4,r2
   11264:	202091ba 	slli	r16,r4,6
   11268:	8809883a 	mov	r4,r17
   1126c:	8020d27a 	srli	r16,r16,9
   11270:	003fda06 	br	111dc <__alt_data_end+0xffff11dc>
   11274:	0009883a 	mov	r4,zero
   11278:	0007883a 	mov	r3,zero
   1127c:	0021883a 	mov	r16,zero
   11280:	003fd606 	br	111dc <__alt_data_end+0xffff11dc>
   11284:	0121c83a 	sub	r16,zero,r4
   11288:	003fc806 	br	111ac <__alt_data_end+0xffff11ac>
   1128c:	01002e44 	movi	r4,185
   11290:	20c9c83a 	sub	r4,r4,r3
   11294:	01400144 	movi	r5,5
   11298:	8108983a 	sll	r4,r16,r4
   1129c:	288bc83a 	sub	r5,r5,r2
   112a0:	8160d83a 	srl	r16,r16,r5
   112a4:	2008c03a 	cmpne	r4,r4,zero
   112a8:	8120b03a 	or	r16,r16,r4
   112ac:	003fdd06 	br	11224 <__alt_data_end+0xffff1224>

000112b0 <__extendsfdf2>:
   112b0:	200ad5fa 	srli	r5,r4,23
   112b4:	defffd04 	addi	sp,sp,-12
   112b8:	dc400115 	stw	r17,4(sp)
   112bc:	29403fcc 	andi	r5,r5,255
   112c0:	29800044 	addi	r6,r5,1
   112c4:	04402034 	movhi	r17,128
   112c8:	dc000015 	stw	r16,0(sp)
   112cc:	8c7fffc4 	addi	r17,r17,-1
   112d0:	dfc00215 	stw	ra,8(sp)
   112d4:	31803fcc 	andi	r6,r6,255
   112d8:	00800044 	movi	r2,1
   112dc:	8922703a 	and	r17,r17,r4
   112e0:	2020d7fa 	srli	r16,r4,31
   112e4:	1180110e 	bge	r2,r6,1132c <__extendsfdf2+0x7c>
   112e8:	880cd0fa 	srli	r6,r17,3
   112ec:	8822977a 	slli	r17,r17,29
   112f0:	2940e004 	addi	r5,r5,896
   112f4:	2941ffcc 	andi	r5,r5,2047
   112f8:	2804953a 	slli	r2,r5,20
   112fc:	01400434 	movhi	r5,16
   11300:	800697fa 	slli	r3,r16,31
   11304:	297fffc4 	addi	r5,r5,-1
   11308:	314a703a 	and	r5,r6,r5
   1130c:	288ab03a 	or	r5,r5,r2
   11310:	28c6b03a 	or	r3,r5,r3
   11314:	8805883a 	mov	r2,r17
   11318:	dfc00217 	ldw	ra,8(sp)
   1131c:	dc400117 	ldw	r17,4(sp)
   11320:	dc000017 	ldw	r16,0(sp)
   11324:	dec00304 	addi	sp,sp,12
   11328:	f800283a 	ret
   1132c:	2800111e 	bne	r5,zero,11374 <__extendsfdf2+0xc4>
   11330:	88001c26 	beq	r17,zero,113a4 <__extendsfdf2+0xf4>
   11334:	8809883a 	mov	r4,r17
   11338:	00113c00 	call	113c0 <__clzsi2>
   1133c:	00c00284 	movi	r3,10
   11340:	18801b16 	blt	r3,r2,113b0 <__extendsfdf2+0x100>
   11344:	018002c4 	movi	r6,11
   11348:	308dc83a 	sub	r6,r6,r2
   1134c:	11000544 	addi	r4,r2,21
   11350:	8986d83a 	srl	r3,r17,r6
   11354:	8922983a 	sll	r17,r17,r4
   11358:	0180e244 	movi	r6,905
   1135c:	01400434 	movhi	r5,16
   11360:	3085c83a 	sub	r2,r6,r2
   11364:	297fffc4 	addi	r5,r5,-1
   11368:	194c703a 	and	r6,r3,r5
   1136c:	1141ffcc 	andi	r5,r2,2047
   11370:	003fe006 	br	112f4 <__alt_data_end+0xffff12f4>
   11374:	88000826 	beq	r17,zero,11398 <__extendsfdf2+0xe8>
   11378:	880cd0fa 	srli	r6,r17,3
   1137c:	00800434 	movhi	r2,16
   11380:	10bfffc4 	addi	r2,r2,-1
   11384:	31800234 	orhi	r6,r6,8
   11388:	8822977a 	slli	r17,r17,29
   1138c:	308c703a 	and	r6,r6,r2
   11390:	0141ffc4 	movi	r5,2047
   11394:	003fd706 	br	112f4 <__alt_data_end+0xffff12f4>
   11398:	0141ffc4 	movi	r5,2047
   1139c:	000d883a 	mov	r6,zero
   113a0:	003fd406 	br	112f4 <__alt_data_end+0xffff12f4>
   113a4:	000b883a 	mov	r5,zero
   113a8:	000d883a 	mov	r6,zero
   113ac:	003fd106 	br	112f4 <__alt_data_end+0xffff12f4>
   113b0:	11bffd44 	addi	r6,r2,-11
   113b4:	8986983a 	sll	r3,r17,r6
   113b8:	0023883a 	mov	r17,zero
   113bc:	003fe606 	br	11358 <__alt_data_end+0xffff1358>

000113c0 <__clzsi2>:
   113c0:	00bfffd4 	movui	r2,65535
   113c4:	11000536 	bltu	r2,r4,113dc <__clzsi2+0x1c>
   113c8:	00803fc4 	movi	r2,255
   113cc:	11000f36 	bltu	r2,r4,1140c <__clzsi2+0x4c>
   113d0:	00800804 	movi	r2,32
   113d4:	0007883a 	mov	r3,zero
   113d8:	00000506 	br	113f0 <__clzsi2+0x30>
   113dc:	00804034 	movhi	r2,256
   113e0:	10bfffc4 	addi	r2,r2,-1
   113e4:	11000c2e 	bgeu	r2,r4,11418 <__clzsi2+0x58>
   113e8:	00800204 	movi	r2,8
   113ec:	00c00604 	movi	r3,24
   113f0:	20c8d83a 	srl	r4,r4,r3
   113f4:	00c00074 	movhi	r3,1
   113f8:	18c98344 	addi	r3,r3,9741
   113fc:	1909883a 	add	r4,r3,r4
   11400:	20c00003 	ldbu	r3,0(r4)
   11404:	10c5c83a 	sub	r2,r2,r3
   11408:	f800283a 	ret
   1140c:	00800604 	movi	r2,24
   11410:	00c00204 	movi	r3,8
   11414:	003ff606 	br	113f0 <__alt_data_end+0xffff13f0>
   11418:	00800404 	movi	r2,16
   1141c:	1007883a 	mov	r3,r2
   11420:	003ff306 	br	113f0 <__alt_data_end+0xffff13f0>

00011424 <__mulsi3>:
   11424:	0005883a 	mov	r2,zero
   11428:	20000726 	beq	r4,zero,11448 <__mulsi3+0x24>
   1142c:	20c0004c 	andi	r3,r4,1
   11430:	2008d07a 	srli	r4,r4,1
   11434:	18000126 	beq	r3,zero,1143c <__mulsi3+0x18>
   11438:	1145883a 	add	r2,r2,r5
   1143c:	294b883a 	add	r5,r5,r5
   11440:	203ffa1e 	bne	r4,zero,1142c <__alt_data_end+0xffff142c>
   11444:	f800283a 	ret
   11448:	f800283a 	ret

0001144c <_printf_r>:
   1144c:	defffd04 	addi	sp,sp,-12
   11450:	dfc00015 	stw	ra,0(sp)
   11454:	d9800115 	stw	r6,4(sp)
   11458:	d9c00215 	stw	r7,8(sp)
   1145c:	20c00217 	ldw	r3,8(r4)
   11460:	01800074 	movhi	r6,1
   11464:	3186ce04 	addi	r6,r6,6968
   11468:	19800115 	stw	r6,4(r3)
   1146c:	280d883a 	mov	r6,r5
   11470:	21400217 	ldw	r5,8(r4)
   11474:	d9c00104 	addi	r7,sp,4
   11478:	00115f00 	call	115f0 <___vfprintf_internal_r>
   1147c:	dfc00017 	ldw	ra,0(sp)
   11480:	dec00304 	addi	sp,sp,12
   11484:	f800283a 	ret

00011488 <printf>:
   11488:	defffc04 	addi	sp,sp,-16
   1148c:	dfc00015 	stw	ra,0(sp)
   11490:	d9400115 	stw	r5,4(sp)
   11494:	d9800215 	stw	r6,8(sp)
   11498:	d9c00315 	stw	r7,12(sp)
   1149c:	00800074 	movhi	r2,1
   114a0:	108a5204 	addi	r2,r2,10568
   114a4:	10800017 	ldw	r2,0(r2)
   114a8:	01400074 	movhi	r5,1
   114ac:	2946ce04 	addi	r5,r5,6968
   114b0:	10c00217 	ldw	r3,8(r2)
   114b4:	d9800104 	addi	r6,sp,4
   114b8:	19400115 	stw	r5,4(r3)
   114bc:	200b883a 	mov	r5,r4
   114c0:	11000217 	ldw	r4,8(r2)
   114c4:	0011b1c0 	call	11b1c <__vfprintf_internal>
   114c8:	dfc00017 	ldw	ra,0(sp)
   114cc:	dec00404 	addi	sp,sp,16
   114d0:	f800283a 	ret

000114d4 <_puts_r>:
   114d4:	defffd04 	addi	sp,sp,-12
   114d8:	dc000015 	stw	r16,0(sp)
   114dc:	2021883a 	mov	r16,r4
   114e0:	2809883a 	mov	r4,r5
   114e4:	dfc00215 	stw	ra,8(sp)
   114e8:	dc400115 	stw	r17,4(sp)
   114ec:	2823883a 	mov	r17,r5
   114f0:	00115680 	call	11568 <strlen>
   114f4:	81400217 	ldw	r5,8(r16)
   114f8:	01000074 	movhi	r4,1
   114fc:	2106ce04 	addi	r4,r4,6968
   11500:	29000115 	stw	r4,4(r5)
   11504:	100f883a 	mov	r7,r2
   11508:	880d883a 	mov	r6,r17
   1150c:	8009883a 	mov	r4,r16
   11510:	0011b380 	call	11b38 <__sfvwrite_small_dev>
   11514:	00ffffc4 	movi	r3,-1
   11518:	10c00926 	beq	r2,r3,11540 <_puts_r+0x6c>
   1151c:	81400217 	ldw	r5,8(r16)
   11520:	01800074 	movhi	r6,1
   11524:	01c00044 	movi	r7,1
   11528:	28800117 	ldw	r2,4(r5)
   1152c:	31896a04 	addi	r6,r6,9640
   11530:	8009883a 	mov	r4,r16
   11534:	103ee83a 	callr	r2
   11538:	10bfffe0 	cmpeqi	r2,r2,-1
   1153c:	0085c83a 	sub	r2,zero,r2
   11540:	dfc00217 	ldw	ra,8(sp)
   11544:	dc400117 	ldw	r17,4(sp)
   11548:	dc000017 	ldw	r16,0(sp)
   1154c:	dec00304 	addi	sp,sp,12
   11550:	f800283a 	ret

00011554 <puts>:
   11554:	00800074 	movhi	r2,1
   11558:	108a5204 	addi	r2,r2,10568
   1155c:	200b883a 	mov	r5,r4
   11560:	11000017 	ldw	r4,0(r2)
   11564:	00114d41 	jmpi	114d4 <_puts_r>

00011568 <strlen>:
   11568:	2005883a 	mov	r2,r4
   1156c:	10c00007 	ldb	r3,0(r2)
   11570:	18000226 	beq	r3,zero,1157c <strlen+0x14>
   11574:	10800044 	addi	r2,r2,1
   11578:	003ffc06 	br	1156c <__alt_data_end+0xffff156c>
   1157c:	1105c83a 	sub	r2,r2,r4
   11580:	f800283a 	ret

00011584 <print_repeat>:
   11584:	defffb04 	addi	sp,sp,-20
   11588:	dc800315 	stw	r18,12(sp)
   1158c:	dc400215 	stw	r17,8(sp)
   11590:	dc000115 	stw	r16,4(sp)
   11594:	dfc00415 	stw	ra,16(sp)
   11598:	2025883a 	mov	r18,r4
   1159c:	2823883a 	mov	r17,r5
   115a0:	d9800005 	stb	r6,0(sp)
   115a4:	3821883a 	mov	r16,r7
   115a8:	04000a0e 	bge	zero,r16,115d4 <print_repeat+0x50>
   115ac:	88800117 	ldw	r2,4(r17)
   115b0:	01c00044 	movi	r7,1
   115b4:	d80d883a 	mov	r6,sp
   115b8:	880b883a 	mov	r5,r17
   115bc:	9009883a 	mov	r4,r18
   115c0:	103ee83a 	callr	r2
   115c4:	843fffc4 	addi	r16,r16,-1
   115c8:	103ff726 	beq	r2,zero,115a8 <__alt_data_end+0xffff15a8>
   115cc:	00bfffc4 	movi	r2,-1
   115d0:	00000106 	br	115d8 <print_repeat+0x54>
   115d4:	0005883a 	mov	r2,zero
   115d8:	dfc00417 	ldw	ra,16(sp)
   115dc:	dc800317 	ldw	r18,12(sp)
   115e0:	dc400217 	ldw	r17,8(sp)
   115e4:	dc000117 	ldw	r16,4(sp)
   115e8:	dec00504 	addi	sp,sp,20
   115ec:	f800283a 	ret

000115f0 <___vfprintf_internal_r>:
   115f0:	deffe504 	addi	sp,sp,-108
   115f4:	d8c00804 	addi	r3,sp,32
   115f8:	ddc01815 	stw	r23,96(sp)
   115fc:	dd801715 	stw	r22,92(sp)
   11600:	dd401615 	stw	r21,88(sp)
   11604:	dd001515 	stw	r20,84(sp)
   11608:	dcc01415 	stw	r19,80(sp)
   1160c:	dc801315 	stw	r18,76(sp)
   11610:	dc401215 	stw	r17,72(sp)
   11614:	dc001115 	stw	r16,68(sp)
   11618:	dfc01a15 	stw	ra,104(sp)
   1161c:	df001915 	stw	fp,100(sp)
   11620:	2029883a 	mov	r20,r4
   11624:	2823883a 	mov	r17,r5
   11628:	382d883a 	mov	r22,r7
   1162c:	d9800f15 	stw	r6,60(sp)
   11630:	0021883a 	mov	r16,zero
   11634:	d8000e15 	stw	zero,56(sp)
   11638:	d8000a15 	stw	zero,40(sp)
   1163c:	002b883a 	mov	r21,zero
   11640:	0027883a 	mov	r19,zero
   11644:	0025883a 	mov	r18,zero
   11648:	d8000c15 	stw	zero,48(sp)
   1164c:	d8000b15 	stw	zero,44(sp)
   11650:	002f883a 	mov	r23,zero
   11654:	d8c00915 	stw	r3,36(sp)
   11658:	d8c00f17 	ldw	r3,60(sp)
   1165c:	19000003 	ldbu	r4,0(r3)
   11660:	20803fcc 	andi	r2,r4,255
   11664:	1080201c 	xori	r2,r2,128
   11668:	10bfe004 	addi	r2,r2,-128
   1166c:	10011e26 	beq	r2,zero,11ae8 <___vfprintf_internal_r+0x4f8>
   11670:	00c00044 	movi	r3,1
   11674:	b8c01426 	beq	r23,r3,116c8 <___vfprintf_internal_r+0xd8>
   11678:	1dc00216 	blt	r3,r23,11684 <___vfprintf_internal_r+0x94>
   1167c:	b8000626 	beq	r23,zero,11698 <___vfprintf_internal_r+0xa8>
   11680:	00011506 	br	11ad8 <___vfprintf_internal_r+0x4e8>
   11684:	01400084 	movi	r5,2
   11688:	b9401d26 	beq	r23,r5,11700 <___vfprintf_internal_r+0x110>
   1168c:	014000c4 	movi	r5,3
   11690:	b9402b26 	beq	r23,r5,11740 <___vfprintf_internal_r+0x150>
   11694:	00011006 	br	11ad8 <___vfprintf_internal_r+0x4e8>
   11698:	01400944 	movi	r5,37
   1169c:	1140fc26 	beq	r2,r5,11a90 <___vfprintf_internal_r+0x4a0>
   116a0:	88800117 	ldw	r2,4(r17)
   116a4:	d9000005 	stb	r4,0(sp)
   116a8:	01c00044 	movi	r7,1
   116ac:	d80d883a 	mov	r6,sp
   116b0:	880b883a 	mov	r5,r17
   116b4:	a009883a 	mov	r4,r20
   116b8:	103ee83a 	callr	r2
   116bc:	1000d81e 	bne	r2,zero,11a20 <___vfprintf_internal_r+0x430>
   116c0:	84000044 	addi	r16,r16,1
   116c4:	00010406 	br	11ad8 <___vfprintf_internal_r+0x4e8>
   116c8:	01400c04 	movi	r5,48
   116cc:	1140fa26 	beq	r2,r5,11ab8 <___vfprintf_internal_r+0x4c8>
   116d0:	01400944 	movi	r5,37
   116d4:	11400a1e 	bne	r2,r5,11700 <___vfprintf_internal_r+0x110>
   116d8:	d8800005 	stb	r2,0(sp)
   116dc:	88800117 	ldw	r2,4(r17)
   116e0:	b80f883a 	mov	r7,r23
   116e4:	d80d883a 	mov	r6,sp
   116e8:	880b883a 	mov	r5,r17
   116ec:	a009883a 	mov	r4,r20
   116f0:	103ee83a 	callr	r2
   116f4:	1000ca1e 	bne	r2,zero,11a20 <___vfprintf_internal_r+0x430>
   116f8:	84000044 	addi	r16,r16,1
   116fc:	0000f506 	br	11ad4 <___vfprintf_internal_r+0x4e4>
   11700:	25fff404 	addi	r23,r4,-48
   11704:	bdc03fcc 	andi	r23,r23,255
   11708:	00c00244 	movi	r3,9
   1170c:	1dc00936 	bltu	r3,r23,11734 <___vfprintf_internal_r+0x144>
   11710:	00bfffc4 	movi	r2,-1
   11714:	90800426 	beq	r18,r2,11728 <___vfprintf_internal_r+0x138>
   11718:	01400284 	movi	r5,10
   1171c:	9009883a 	mov	r4,r18
   11720:	00114240 	call	11424 <__mulsi3>
   11724:	00000106 	br	1172c <___vfprintf_internal_r+0x13c>
   11728:	0005883a 	mov	r2,zero
   1172c:	b8a5883a 	add	r18,r23,r2
   11730:	0000e206 	br	11abc <___vfprintf_internal_r+0x4cc>
   11734:	01400b84 	movi	r5,46
   11738:	1140e426 	beq	r2,r5,11acc <___vfprintf_internal_r+0x4dc>
   1173c:	05c00084 	movi	r23,2
   11740:	213ff404 	addi	r4,r4,-48
   11744:	27003fcc 	andi	fp,r4,255
   11748:	00c00244 	movi	r3,9
   1174c:	1f000936 	bltu	r3,fp,11774 <___vfprintf_internal_r+0x184>
   11750:	00bfffc4 	movi	r2,-1
   11754:	98800426 	beq	r19,r2,11768 <___vfprintf_internal_r+0x178>
   11758:	01400284 	movi	r5,10
   1175c:	9809883a 	mov	r4,r19
   11760:	00114240 	call	11424 <__mulsi3>
   11764:	00000106 	br	1176c <___vfprintf_internal_r+0x17c>
   11768:	0005883a 	mov	r2,zero
   1176c:	e0a7883a 	add	r19,fp,r2
   11770:	0000d906 	br	11ad8 <___vfprintf_internal_r+0x4e8>
   11774:	00c01b04 	movi	r3,108
   11778:	10c0d226 	beq	r2,r3,11ac4 <___vfprintf_internal_r+0x4d4>
   1177c:	013fffc4 	movi	r4,-1
   11780:	99000226 	beq	r19,r4,1178c <___vfprintf_internal_r+0x19c>
   11784:	d8000b15 	stw	zero,44(sp)
   11788:	00000106 	br	11790 <___vfprintf_internal_r+0x1a0>
   1178c:	04c00044 	movi	r19,1
   11790:	01001a44 	movi	r4,105
   11794:	11001626 	beq	r2,r4,117f0 <___vfprintf_internal_r+0x200>
   11798:	20800916 	blt	r4,r2,117c0 <___vfprintf_internal_r+0x1d0>
   1179c:	010018c4 	movi	r4,99
   117a0:	11008826 	beq	r2,r4,119c4 <___vfprintf_internal_r+0x3d4>
   117a4:	01001904 	movi	r4,100
   117a8:	11001126 	beq	r2,r4,117f0 <___vfprintf_internal_r+0x200>
   117ac:	01001604 	movi	r4,88
   117b0:	1100c81e 	bne	r2,r4,11ad4 <___vfprintf_internal_r+0x4e4>
   117b4:	00c00044 	movi	r3,1
   117b8:	d8c00e15 	stw	r3,56(sp)
   117bc:	00001506 	br	11814 <___vfprintf_internal_r+0x224>
   117c0:	01001cc4 	movi	r4,115
   117c4:	11009826 	beq	r2,r4,11a28 <___vfprintf_internal_r+0x438>
   117c8:	20800416 	blt	r4,r2,117dc <___vfprintf_internal_r+0x1ec>
   117cc:	01001bc4 	movi	r4,111
   117d0:	1100c01e 	bne	r2,r4,11ad4 <___vfprintf_internal_r+0x4e4>
   117d4:	05400204 	movi	r21,8
   117d8:	00000f06 	br	11818 <___vfprintf_internal_r+0x228>
   117dc:	01001d44 	movi	r4,117
   117e0:	11000d26 	beq	r2,r4,11818 <___vfprintf_internal_r+0x228>
   117e4:	01001e04 	movi	r4,120
   117e8:	11000a26 	beq	r2,r4,11814 <___vfprintf_internal_r+0x224>
   117ec:	0000b906 	br	11ad4 <___vfprintf_internal_r+0x4e4>
   117f0:	d8c00a17 	ldw	r3,40(sp)
   117f4:	b7000104 	addi	fp,r22,4
   117f8:	18000726 	beq	r3,zero,11818 <___vfprintf_internal_r+0x228>
   117fc:	df000d15 	stw	fp,52(sp)
   11800:	b5c00017 	ldw	r23,0(r22)
   11804:	b800080e 	bge	r23,zero,11828 <___vfprintf_internal_r+0x238>
   11808:	05efc83a 	sub	r23,zero,r23
   1180c:	02400044 	movi	r9,1
   11810:	00000606 	br	1182c <___vfprintf_internal_r+0x23c>
   11814:	05400404 	movi	r21,16
   11818:	b0c00104 	addi	r3,r22,4
   1181c:	d8c00d15 	stw	r3,52(sp)
   11820:	b5c00017 	ldw	r23,0(r22)
   11824:	d8000a15 	stw	zero,40(sp)
   11828:	0013883a 	mov	r9,zero
   1182c:	d839883a 	mov	fp,sp
   11830:	b8001726 	beq	r23,zero,11890 <___vfprintf_internal_r+0x2a0>
   11834:	a80b883a 	mov	r5,r21
   11838:	b809883a 	mov	r4,r23
   1183c:	da401015 	stw	r9,64(sp)
   11840:	0011d400 	call	11d40 <__udivsi3>
   11844:	a80b883a 	mov	r5,r21
   11848:	1009883a 	mov	r4,r2
   1184c:	102d883a 	mov	r22,r2
   11850:	00114240 	call	11424 <__mulsi3>
   11854:	b885c83a 	sub	r2,r23,r2
   11858:	00c00244 	movi	r3,9
   1185c:	da401017 	ldw	r9,64(sp)
   11860:	18800216 	blt	r3,r2,1186c <___vfprintf_internal_r+0x27c>
   11864:	10800c04 	addi	r2,r2,48
   11868:	00000506 	br	11880 <___vfprintf_internal_r+0x290>
   1186c:	d8c00e17 	ldw	r3,56(sp)
   11870:	18000226 	beq	r3,zero,1187c <___vfprintf_internal_r+0x28c>
   11874:	10800dc4 	addi	r2,r2,55
   11878:	00000106 	br	11880 <___vfprintf_internal_r+0x290>
   1187c:	108015c4 	addi	r2,r2,87
   11880:	e0800005 	stb	r2,0(fp)
   11884:	b02f883a 	mov	r23,r22
   11888:	e7000044 	addi	fp,fp,1
   1188c:	003fe806 	br	11830 <__alt_data_end+0xffff1830>
   11890:	e6efc83a 	sub	r23,fp,sp
   11894:	9dc5c83a 	sub	r2,r19,r23
   11898:	0080090e 	bge	zero,r2,118c0 <___vfprintf_internal_r+0x2d0>
   1189c:	e085883a 	add	r2,fp,r2
   118a0:	01400c04 	movi	r5,48
   118a4:	d8c00917 	ldw	r3,36(sp)
   118a8:	e009883a 	mov	r4,fp
   118ac:	e0c0032e 	bgeu	fp,r3,118bc <___vfprintf_internal_r+0x2cc>
   118b0:	e7000044 	addi	fp,fp,1
   118b4:	21400005 	stb	r5,0(r4)
   118b8:	e0bffa1e 	bne	fp,r2,118a4 <__alt_data_end+0xffff18a4>
   118bc:	e6efc83a 	sub	r23,fp,sp
   118c0:	d8c00b17 	ldw	r3,44(sp)
   118c4:	4dd1883a 	add	r8,r9,r23
   118c8:	922dc83a 	sub	r22,r18,r8
   118cc:	18001626 	beq	r3,zero,11928 <___vfprintf_internal_r+0x338>
   118d0:	48000a26 	beq	r9,zero,118fc <___vfprintf_internal_r+0x30c>
   118d4:	00800b44 	movi	r2,45
   118d8:	d8800805 	stb	r2,32(sp)
   118dc:	88800117 	ldw	r2,4(r17)
   118e0:	01c00044 	movi	r7,1
   118e4:	d9800804 	addi	r6,sp,32
   118e8:	880b883a 	mov	r5,r17
   118ec:	a009883a 	mov	r4,r20
   118f0:	103ee83a 	callr	r2
   118f4:	10004a1e 	bne	r2,zero,11a20 <___vfprintf_internal_r+0x430>
   118f8:	84000044 	addi	r16,r16,1
   118fc:	0580070e 	bge	zero,r22,1191c <___vfprintf_internal_r+0x32c>
   11900:	b00f883a 	mov	r7,r22
   11904:	01800c04 	movi	r6,48
   11908:	880b883a 	mov	r5,r17
   1190c:	a009883a 	mov	r4,r20
   11910:	00115840 	call	11584 <print_repeat>
   11914:	1000421e 	bne	r2,zero,11a20 <___vfprintf_internal_r+0x430>
   11918:	85a1883a 	add	r16,r16,r22
   1191c:	e02d883a 	mov	r22,fp
   11920:	bf2fc83a 	sub	r23,r23,fp
   11924:	00002006 	br	119a8 <___vfprintf_internal_r+0x3b8>
   11928:	0580090e 	bge	zero,r22,11950 <___vfprintf_internal_r+0x360>
   1192c:	b00f883a 	mov	r7,r22
   11930:	01800804 	movi	r6,32
   11934:	880b883a 	mov	r5,r17
   11938:	a009883a 	mov	r4,r20
   1193c:	da401015 	stw	r9,64(sp)
   11940:	00115840 	call	11584 <print_repeat>
   11944:	da401017 	ldw	r9,64(sp)
   11948:	1000351e 	bne	r2,zero,11a20 <___vfprintf_internal_r+0x430>
   1194c:	85a1883a 	add	r16,r16,r22
   11950:	483ff226 	beq	r9,zero,1191c <__alt_data_end+0xffff191c>
   11954:	00800b44 	movi	r2,45
   11958:	d8800805 	stb	r2,32(sp)
   1195c:	88800117 	ldw	r2,4(r17)
   11960:	01c00044 	movi	r7,1
   11964:	d9800804 	addi	r6,sp,32
   11968:	880b883a 	mov	r5,r17
   1196c:	a009883a 	mov	r4,r20
   11970:	103ee83a 	callr	r2
   11974:	10002a1e 	bne	r2,zero,11a20 <___vfprintf_internal_r+0x430>
   11978:	84000044 	addi	r16,r16,1
   1197c:	003fe706 	br	1191c <__alt_data_end+0xffff191c>
   11980:	b5bfffc4 	addi	r22,r22,-1
   11984:	b0800003 	ldbu	r2,0(r22)
   11988:	01c00044 	movi	r7,1
   1198c:	d9800804 	addi	r6,sp,32
   11990:	d8800805 	stb	r2,32(sp)
   11994:	88800117 	ldw	r2,4(r17)
   11998:	880b883a 	mov	r5,r17
   1199c:	a009883a 	mov	r4,r20
   119a0:	103ee83a 	callr	r2
   119a4:	10001e1e 	bne	r2,zero,11a20 <___vfprintf_internal_r+0x430>
   119a8:	8585c83a 	sub	r2,r16,r22
   119ac:	b5c9883a 	add	r4,r22,r23
   119b0:	e085883a 	add	r2,fp,r2
   119b4:	013ff216 	blt	zero,r4,11980 <__alt_data_end+0xffff1980>
   119b8:	1021883a 	mov	r16,r2
   119bc:	dd800d17 	ldw	r22,52(sp)
   119c0:	00004406 	br	11ad4 <___vfprintf_internal_r+0x4e4>
   119c4:	00800044 	movi	r2,1
   119c8:	1480080e 	bge	r2,r18,119ec <___vfprintf_internal_r+0x3fc>
   119cc:	95ffffc4 	addi	r23,r18,-1
   119d0:	b80f883a 	mov	r7,r23
   119d4:	01800804 	movi	r6,32
   119d8:	880b883a 	mov	r5,r17
   119dc:	a009883a 	mov	r4,r20
   119e0:	00115840 	call	11584 <print_repeat>
   119e4:	10000e1e 	bne	r2,zero,11a20 <___vfprintf_internal_r+0x430>
   119e8:	85e1883a 	add	r16,r16,r23
   119ec:	b0800017 	ldw	r2,0(r22)
   119f0:	01c00044 	movi	r7,1
   119f4:	d80d883a 	mov	r6,sp
   119f8:	d8800005 	stb	r2,0(sp)
   119fc:	88800117 	ldw	r2,4(r17)
   11a00:	880b883a 	mov	r5,r17
   11a04:	a009883a 	mov	r4,r20
   11a08:	b5c00104 	addi	r23,r22,4
   11a0c:	103ee83a 	callr	r2
   11a10:	1000031e 	bne	r2,zero,11a20 <___vfprintf_internal_r+0x430>
   11a14:	84000044 	addi	r16,r16,1
   11a18:	b82d883a 	mov	r22,r23
   11a1c:	00002d06 	br	11ad4 <___vfprintf_internal_r+0x4e4>
   11a20:	00bfffc4 	movi	r2,-1
   11a24:	00003106 	br	11aec <___vfprintf_internal_r+0x4fc>
   11a28:	b5c00017 	ldw	r23,0(r22)
   11a2c:	b7000104 	addi	fp,r22,4
   11a30:	b809883a 	mov	r4,r23
   11a34:	00115680 	call	11568 <strlen>
   11a38:	9091c83a 	sub	r8,r18,r2
   11a3c:	102d883a 	mov	r22,r2
   11a40:	0200090e 	bge	zero,r8,11a68 <___vfprintf_internal_r+0x478>
   11a44:	400f883a 	mov	r7,r8
   11a48:	01800804 	movi	r6,32
   11a4c:	880b883a 	mov	r5,r17
   11a50:	a009883a 	mov	r4,r20
   11a54:	da001015 	stw	r8,64(sp)
   11a58:	00115840 	call	11584 <print_repeat>
   11a5c:	da001017 	ldw	r8,64(sp)
   11a60:	103fef1e 	bne	r2,zero,11a20 <__alt_data_end+0xffff1a20>
   11a64:	8221883a 	add	r16,r16,r8
   11a68:	88800117 	ldw	r2,4(r17)
   11a6c:	b00f883a 	mov	r7,r22
   11a70:	b80d883a 	mov	r6,r23
   11a74:	880b883a 	mov	r5,r17
   11a78:	a009883a 	mov	r4,r20
   11a7c:	103ee83a 	callr	r2
   11a80:	103fe71e 	bne	r2,zero,11a20 <__alt_data_end+0xffff1a20>
   11a84:	85a1883a 	add	r16,r16,r22
   11a88:	e02d883a 	mov	r22,fp
   11a8c:	00001106 	br	11ad4 <___vfprintf_internal_r+0x4e4>
   11a90:	00c00044 	movi	r3,1
   11a94:	04ffffc4 	movi	r19,-1
   11a98:	d8000e15 	stw	zero,56(sp)
   11a9c:	d8c00a15 	stw	r3,40(sp)
   11aa0:	05400284 	movi	r21,10
   11aa4:	9825883a 	mov	r18,r19
   11aa8:	d8000c15 	stw	zero,48(sp)
   11aac:	d8000b15 	stw	zero,44(sp)
   11ab0:	182f883a 	mov	r23,r3
   11ab4:	00000806 	br	11ad8 <___vfprintf_internal_r+0x4e8>
   11ab8:	ddc00b15 	stw	r23,44(sp)
   11abc:	05c00084 	movi	r23,2
   11ac0:	00000506 	br	11ad8 <___vfprintf_internal_r+0x4e8>
   11ac4:	00c00044 	movi	r3,1
   11ac8:	d8c00c15 	stw	r3,48(sp)
   11acc:	05c000c4 	movi	r23,3
   11ad0:	00000106 	br	11ad8 <___vfprintf_internal_r+0x4e8>
   11ad4:	002f883a 	mov	r23,zero
   11ad8:	d8c00f17 	ldw	r3,60(sp)
   11adc:	18c00044 	addi	r3,r3,1
   11ae0:	d8c00f15 	stw	r3,60(sp)
   11ae4:	003edc06 	br	11658 <__alt_data_end+0xffff1658>
   11ae8:	8005883a 	mov	r2,r16
   11aec:	dfc01a17 	ldw	ra,104(sp)
   11af0:	df001917 	ldw	fp,100(sp)
   11af4:	ddc01817 	ldw	r23,96(sp)
   11af8:	dd801717 	ldw	r22,92(sp)
   11afc:	dd401617 	ldw	r21,88(sp)
   11b00:	dd001517 	ldw	r20,84(sp)
   11b04:	dcc01417 	ldw	r19,80(sp)
   11b08:	dc801317 	ldw	r18,76(sp)
   11b0c:	dc401217 	ldw	r17,72(sp)
   11b10:	dc001117 	ldw	r16,68(sp)
   11b14:	dec01b04 	addi	sp,sp,108
   11b18:	f800283a 	ret

00011b1c <__vfprintf_internal>:
   11b1c:	00800074 	movhi	r2,1
   11b20:	108a5204 	addi	r2,r2,10568
   11b24:	300f883a 	mov	r7,r6
   11b28:	280d883a 	mov	r6,r5
   11b2c:	200b883a 	mov	r5,r4
   11b30:	11000017 	ldw	r4,0(r2)
   11b34:	00115f01 	jmpi	115f0 <___vfprintf_internal_r>

00011b38 <__sfvwrite_small_dev>:
   11b38:	2880000b 	ldhu	r2,0(r5)
   11b3c:	1080020c 	andi	r2,r2,8
   11b40:	10002126 	beq	r2,zero,11bc8 <__sfvwrite_small_dev+0x90>
   11b44:	2880008f 	ldh	r2,2(r5)
   11b48:	defffa04 	addi	sp,sp,-24
   11b4c:	dc000015 	stw	r16,0(sp)
   11b50:	dfc00515 	stw	ra,20(sp)
   11b54:	dd000415 	stw	r20,16(sp)
   11b58:	dcc00315 	stw	r19,12(sp)
   11b5c:	dc800215 	stw	r18,8(sp)
   11b60:	dc400115 	stw	r17,4(sp)
   11b64:	2821883a 	mov	r16,r5
   11b68:	10001216 	blt	r2,zero,11bb4 <__sfvwrite_small_dev+0x7c>
   11b6c:	2027883a 	mov	r19,r4
   11b70:	3025883a 	mov	r18,r6
   11b74:	3823883a 	mov	r17,r7
   11b78:	05010004 	movi	r20,1024
   11b7c:	04400b0e 	bge	zero,r17,11bac <__sfvwrite_small_dev+0x74>
   11b80:	880f883a 	mov	r7,r17
   11b84:	a440010e 	bge	r20,r17,11b8c <__sfvwrite_small_dev+0x54>
   11b88:	01c10004 	movi	r7,1024
   11b8c:	8140008f 	ldh	r5,2(r16)
   11b90:	900d883a 	mov	r6,r18
   11b94:	9809883a 	mov	r4,r19
   11b98:	0011bf00 	call	11bf0 <_write_r>
   11b9c:	0080050e 	bge	zero,r2,11bb4 <__sfvwrite_small_dev+0x7c>
   11ba0:	88a3c83a 	sub	r17,r17,r2
   11ba4:	90a5883a 	add	r18,r18,r2
   11ba8:	003ff406 	br	11b7c <__alt_data_end+0xffff1b7c>
   11bac:	0005883a 	mov	r2,zero
   11bb0:	00000706 	br	11bd0 <__sfvwrite_small_dev+0x98>
   11bb4:	8080000b 	ldhu	r2,0(r16)
   11bb8:	10801014 	ori	r2,r2,64
   11bbc:	8080000d 	sth	r2,0(r16)
   11bc0:	00bfffc4 	movi	r2,-1
   11bc4:	00000206 	br	11bd0 <__sfvwrite_small_dev+0x98>
   11bc8:	00bfffc4 	movi	r2,-1
   11bcc:	f800283a 	ret
   11bd0:	dfc00517 	ldw	ra,20(sp)
   11bd4:	dd000417 	ldw	r20,16(sp)
   11bd8:	dcc00317 	ldw	r19,12(sp)
   11bdc:	dc800217 	ldw	r18,8(sp)
   11be0:	dc400117 	ldw	r17,4(sp)
   11be4:	dc000017 	ldw	r16,0(sp)
   11be8:	dec00604 	addi	sp,sp,24
   11bec:	f800283a 	ret

00011bf0 <_write_r>:
   11bf0:	defffd04 	addi	sp,sp,-12
   11bf4:	dc000015 	stw	r16,0(sp)
   11bf8:	04000074 	movhi	r16,1
   11bfc:	dc400115 	stw	r17,4(sp)
   11c00:	840af804 	addi	r16,r16,11232
   11c04:	2023883a 	mov	r17,r4
   11c08:	2809883a 	mov	r4,r5
   11c0c:	300b883a 	mov	r5,r6
   11c10:	380d883a 	mov	r6,r7
   11c14:	dfc00215 	stw	ra,8(sp)
   11c18:	80000015 	stw	zero,0(r16)
   11c1c:	0011fa00 	call	11fa0 <write>
   11c20:	00ffffc4 	movi	r3,-1
   11c24:	10c0031e 	bne	r2,r3,11c34 <_write_r+0x44>
   11c28:	80c00017 	ldw	r3,0(r16)
   11c2c:	18000126 	beq	r3,zero,11c34 <_write_r+0x44>
   11c30:	88c00015 	stw	r3,0(r17)
   11c34:	dfc00217 	ldw	ra,8(sp)
   11c38:	dc400117 	ldw	r17,4(sp)
   11c3c:	dc000017 	ldw	r16,0(sp)
   11c40:	dec00304 	addi	sp,sp,12
   11c44:	f800283a 	ret

00011c48 <__divsi3>:
   11c48:	20001b16 	blt	r4,zero,11cb8 <__divsi3+0x70>
   11c4c:	000f883a 	mov	r7,zero
   11c50:	28001616 	blt	r5,zero,11cac <__divsi3+0x64>
   11c54:	200d883a 	mov	r6,r4
   11c58:	29001a2e 	bgeu	r5,r4,11cc4 <__divsi3+0x7c>
   11c5c:	00800804 	movi	r2,32
   11c60:	00c00044 	movi	r3,1
   11c64:	00000106 	br	11c6c <__divsi3+0x24>
   11c68:	10000d26 	beq	r2,zero,11ca0 <__divsi3+0x58>
   11c6c:	294b883a 	add	r5,r5,r5
   11c70:	10bfffc4 	addi	r2,r2,-1
   11c74:	18c7883a 	add	r3,r3,r3
   11c78:	293ffb36 	bltu	r5,r4,11c68 <__alt_data_end+0xffff1c68>
   11c7c:	0005883a 	mov	r2,zero
   11c80:	18000726 	beq	r3,zero,11ca0 <__divsi3+0x58>
   11c84:	0005883a 	mov	r2,zero
   11c88:	31400236 	bltu	r6,r5,11c94 <__divsi3+0x4c>
   11c8c:	314dc83a 	sub	r6,r6,r5
   11c90:	10c4b03a 	or	r2,r2,r3
   11c94:	1806d07a 	srli	r3,r3,1
   11c98:	280ad07a 	srli	r5,r5,1
   11c9c:	183ffa1e 	bne	r3,zero,11c88 <__alt_data_end+0xffff1c88>
   11ca0:	38000126 	beq	r7,zero,11ca8 <__divsi3+0x60>
   11ca4:	0085c83a 	sub	r2,zero,r2
   11ca8:	f800283a 	ret
   11cac:	014bc83a 	sub	r5,zero,r5
   11cb0:	39c0005c 	xori	r7,r7,1
   11cb4:	003fe706 	br	11c54 <__alt_data_end+0xffff1c54>
   11cb8:	0109c83a 	sub	r4,zero,r4
   11cbc:	01c00044 	movi	r7,1
   11cc0:	003fe306 	br	11c50 <__alt_data_end+0xffff1c50>
   11cc4:	00c00044 	movi	r3,1
   11cc8:	003fee06 	br	11c84 <__alt_data_end+0xffff1c84>

00011ccc <__modsi3>:
   11ccc:	20001716 	blt	r4,zero,11d2c <__modsi3+0x60>
   11cd0:	000f883a 	mov	r7,zero
   11cd4:	2005883a 	mov	r2,r4
   11cd8:	28001216 	blt	r5,zero,11d24 <__modsi3+0x58>
   11cdc:	2900162e 	bgeu	r5,r4,11d38 <__modsi3+0x6c>
   11ce0:	01800804 	movi	r6,32
   11ce4:	00c00044 	movi	r3,1
   11ce8:	00000106 	br	11cf0 <__modsi3+0x24>
   11cec:	30000a26 	beq	r6,zero,11d18 <__modsi3+0x4c>
   11cf0:	294b883a 	add	r5,r5,r5
   11cf4:	31bfffc4 	addi	r6,r6,-1
   11cf8:	18c7883a 	add	r3,r3,r3
   11cfc:	293ffb36 	bltu	r5,r4,11cec <__alt_data_end+0xffff1cec>
   11d00:	18000526 	beq	r3,zero,11d18 <__modsi3+0x4c>
   11d04:	1806d07a 	srli	r3,r3,1
   11d08:	11400136 	bltu	r2,r5,11d10 <__modsi3+0x44>
   11d0c:	1145c83a 	sub	r2,r2,r5
   11d10:	280ad07a 	srli	r5,r5,1
   11d14:	183ffb1e 	bne	r3,zero,11d04 <__alt_data_end+0xffff1d04>
   11d18:	38000126 	beq	r7,zero,11d20 <__modsi3+0x54>
   11d1c:	0085c83a 	sub	r2,zero,r2
   11d20:	f800283a 	ret
   11d24:	014bc83a 	sub	r5,zero,r5
   11d28:	003fec06 	br	11cdc <__alt_data_end+0xffff1cdc>
   11d2c:	0109c83a 	sub	r4,zero,r4
   11d30:	01c00044 	movi	r7,1
   11d34:	003fe706 	br	11cd4 <__alt_data_end+0xffff1cd4>
   11d38:	00c00044 	movi	r3,1
   11d3c:	003ff106 	br	11d04 <__alt_data_end+0xffff1d04>

00011d40 <__udivsi3>:
   11d40:	200d883a 	mov	r6,r4
   11d44:	2900152e 	bgeu	r5,r4,11d9c <__udivsi3+0x5c>
   11d48:	28001416 	blt	r5,zero,11d9c <__udivsi3+0x5c>
   11d4c:	00800804 	movi	r2,32
   11d50:	00c00044 	movi	r3,1
   11d54:	00000206 	br	11d60 <__udivsi3+0x20>
   11d58:	10000e26 	beq	r2,zero,11d94 <__udivsi3+0x54>
   11d5c:	28000516 	blt	r5,zero,11d74 <__udivsi3+0x34>
   11d60:	294b883a 	add	r5,r5,r5
   11d64:	10bfffc4 	addi	r2,r2,-1
   11d68:	18c7883a 	add	r3,r3,r3
   11d6c:	293ffa36 	bltu	r5,r4,11d58 <__alt_data_end+0xffff1d58>
   11d70:	18000826 	beq	r3,zero,11d94 <__udivsi3+0x54>
   11d74:	0005883a 	mov	r2,zero
   11d78:	31400236 	bltu	r6,r5,11d84 <__udivsi3+0x44>
   11d7c:	314dc83a 	sub	r6,r6,r5
   11d80:	10c4b03a 	or	r2,r2,r3
   11d84:	1806d07a 	srli	r3,r3,1
   11d88:	280ad07a 	srli	r5,r5,1
   11d8c:	183ffa1e 	bne	r3,zero,11d78 <__alt_data_end+0xffff1d78>
   11d90:	f800283a 	ret
   11d94:	0005883a 	mov	r2,zero
   11d98:	f800283a 	ret
   11d9c:	00c00044 	movi	r3,1
   11da0:	003ff406 	br	11d74 <__alt_data_end+0xffff1d74>

00011da4 <__umodsi3>:
   11da4:	2005883a 	mov	r2,r4
   11da8:	2900122e 	bgeu	r5,r4,11df4 <__umodsi3+0x50>
   11dac:	28001116 	blt	r5,zero,11df4 <__umodsi3+0x50>
   11db0:	01800804 	movi	r6,32
   11db4:	00c00044 	movi	r3,1
   11db8:	00000206 	br	11dc4 <__umodsi3+0x20>
   11dbc:	30000c26 	beq	r6,zero,11df0 <__umodsi3+0x4c>
   11dc0:	28000516 	blt	r5,zero,11dd8 <__umodsi3+0x34>
   11dc4:	294b883a 	add	r5,r5,r5
   11dc8:	31bfffc4 	addi	r6,r6,-1
   11dcc:	18c7883a 	add	r3,r3,r3
   11dd0:	293ffa36 	bltu	r5,r4,11dbc <__alt_data_end+0xffff1dbc>
   11dd4:	18000626 	beq	r3,zero,11df0 <__umodsi3+0x4c>
   11dd8:	1806d07a 	srli	r3,r3,1
   11ddc:	11400136 	bltu	r2,r5,11de4 <__umodsi3+0x40>
   11de0:	1145c83a 	sub	r2,r2,r5
   11de4:	280ad07a 	srli	r5,r5,1
   11de8:	183ffb1e 	bne	r3,zero,11dd8 <__alt_data_end+0xffff1dd8>
   11dec:	f800283a 	ret
   11df0:	f800283a 	ret
   11df4:	00c00044 	movi	r3,1
   11df8:	003ff706 	br	11dd8 <__alt_data_end+0xffff1dd8>

00011dfc <alt_irq_register>:
   11dfc:	008007c4 	movi	r2,31
   11e00:	11002136 	bltu	r2,r4,11e88 <alt_irq_register+0x8c>
   11e04:	000f303a 	rdctl	r7,status
   11e08:	00ffff84 	movi	r3,-2
   11e0c:	38c4703a 	and	r2,r7,r3
   11e10:	1001703a 	wrctl	status,r2
   11e14:	200490fa 	slli	r2,r4,3
   11e18:	02000074 	movhi	r8,1
   11e1c:	420b3404 	addi	r8,r8,11472
   11e20:	4085883a 	add	r2,r8,r2
   11e24:	11800015 	stw	r6,0(r2)
   11e28:	11400115 	stw	r5,4(r2)
   11e2c:	00800044 	movi	r2,1
   11e30:	30000726 	beq	r6,zero,11e50 <alt_irq_register+0x54>
   11e34:	000b303a 	rdctl	r5,status
   11e38:	28c6703a 	and	r3,r5,r3
   11e3c:	1801703a 	wrctl	status,r3
   11e40:	d0e0a817 	ldw	r3,-32096(gp)
   11e44:	1104983a 	sll	r2,r2,r4
   11e48:	10c4b03a 	or	r2,r2,r3
   11e4c:	00000706 	br	11e6c <alt_irq_register+0x70>
   11e50:	000b303a 	rdctl	r5,status
   11e54:	28c6703a 	and	r3,r5,r3
   11e58:	1801703a 	wrctl	status,r3
   11e5c:	1104983a 	sll	r2,r2,r4
   11e60:	d0e0a817 	ldw	r3,-32096(gp)
   11e64:	0084303a 	nor	r2,zero,r2
   11e68:	10c4703a 	and	r2,r2,r3
   11e6c:	d0a0a815 	stw	r2,-32096(gp)
   11e70:	d0a0a817 	ldw	r2,-32096(gp)
   11e74:	100170fa 	wrctl	ienable,r2
   11e78:	2801703a 	wrctl	status,r5
   11e7c:	3801703a 	wrctl	status,r7
   11e80:	0005883a 	mov	r2,zero
   11e84:	f800283a 	ret
   11e88:	00bffa84 	movi	r2,-22
   11e8c:	f800283a 	ret

00011e90 <alt_load>:
   11e90:	deffff04 	addi	sp,sp,-4
   11e94:	01000074 	movhi	r4,1
   11e98:	01400074 	movhi	r5,1
   11e9c:	dfc00015 	stw	ra,0(sp)
   11ea0:	2109c704 	addi	r4,r4,10012
   11ea4:	294a5b04 	addi	r5,r5,10604
   11ea8:	2140061e 	bne	r4,r5,11ec4 <alt_load+0x34>
   11eac:	01000074 	movhi	r4,1
   11eb0:	01400074 	movhi	r5,1
   11eb4:	21000804 	addi	r4,r4,32
   11eb8:	29400804 	addi	r5,r5,32
   11ebc:	2140121e 	bne	r4,r5,11f08 <alt_load+0x78>
   11ec0:	00000b06 	br	11ef0 <alt_load+0x60>
   11ec4:	00c00074 	movhi	r3,1
   11ec8:	18ca5b04 	addi	r3,r3,10604
   11ecc:	1907c83a 	sub	r3,r3,r4
   11ed0:	0005883a 	mov	r2,zero
   11ed4:	10fff526 	beq	r2,r3,11eac <__alt_data_end+0xffff1eac>
   11ed8:	114f883a 	add	r7,r2,r5
   11edc:	39c00017 	ldw	r7,0(r7)
   11ee0:	110d883a 	add	r6,r2,r4
   11ee4:	10800104 	addi	r2,r2,4
   11ee8:	31c00015 	stw	r7,0(r6)
   11eec:	003ff906 	br	11ed4 <__alt_data_end+0xffff1ed4>
   11ef0:	01000074 	movhi	r4,1
   11ef4:	01400074 	movhi	r5,1
   11ef8:	21090004 	addi	r4,r4,9216
   11efc:	29490004 	addi	r5,r5,9216
   11f00:	2140101e 	bne	r4,r5,11f44 <alt_load+0xb4>
   11f04:	00000b06 	br	11f34 <alt_load+0xa4>
   11f08:	00c00074 	movhi	r3,1
   11f0c:	18c06004 	addi	r3,r3,384
   11f10:	1907c83a 	sub	r3,r3,r4
   11f14:	0005883a 	mov	r2,zero
   11f18:	10fff526 	beq	r2,r3,11ef0 <__alt_data_end+0xffff1ef0>
   11f1c:	114f883a 	add	r7,r2,r5
   11f20:	39c00017 	ldw	r7,0(r7)
   11f24:	110d883a 	add	r6,r2,r4
   11f28:	10800104 	addi	r2,r2,4
   11f2c:	31c00015 	stw	r7,0(r6)
   11f30:	003ff906 	br	11f18 <__alt_data_end+0xffff1f18>
   11f34:	00122640 	call	12264 <alt_dcache_flush_all>
   11f38:	dfc00017 	ldw	ra,0(sp)
   11f3c:	dec00104 	addi	sp,sp,4
   11f40:	00123501 	jmpi	12350 <alt_icache_flush_all>
   11f44:	00c00074 	movhi	r3,1
   11f48:	18c9c704 	addi	r3,r3,10012
   11f4c:	1907c83a 	sub	r3,r3,r4
   11f50:	0005883a 	mov	r2,zero
   11f54:	18bff726 	beq	r3,r2,11f34 <__alt_data_end+0xffff1f34>
   11f58:	114f883a 	add	r7,r2,r5
   11f5c:	39c00017 	ldw	r7,0(r7)
   11f60:	110d883a 	add	r6,r2,r4
   11f64:	10800104 	addi	r2,r2,4
   11f68:	31c00015 	stw	r7,0(r6)
   11f6c:	003ff906 	br	11f54 <__alt_data_end+0xffff1f54>

00011f70 <alt_main>:
   11f70:	deffff04 	addi	sp,sp,-4
   11f74:	0009883a 	mov	r4,zero
   11f78:	dfc00015 	stw	ra,0(sp)
   11f7c:	00120000 	call	12000 <alt_irq_init>
   11f80:	00120200 	call	12020 <alt_sys_init>
   11f84:	d1a0a917 	ldw	r6,-32092(gp)
   11f88:	d160aa17 	ldw	r5,-32088(gp)
   11f8c:	d120ab17 	ldw	r4,-32084(gp)
   11f90:	dfc00017 	ldw	ra,0(sp)
   11f94:	dec00104 	addi	sp,sp,4
   11f98:	00107541 	jmpi	10754 <main>

00011f9c <usleep>:
   11f9c:	00121dc1 	jmpi	121dc <alt_busy_sleep>

00011fa0 <write>:
   11fa0:	00800044 	movi	r2,1
   11fa4:	20800226 	beq	r4,r2,11fb0 <write+0x10>
   11fa8:	00800084 	movi	r2,2
   11fac:	2080041e 	bne	r4,r2,11fc0 <write+0x20>
   11fb0:	01000074 	movhi	r4,1
   11fb4:	000f883a 	mov	r7,zero
   11fb8:	210a5404 	addi	r4,r4,10576
   11fbc:	00120481 	jmpi	12048 <altera_avalon_jtag_uart_write>
   11fc0:	d0a00917 	ldw	r2,-32732(gp)
   11fc4:	10000926 	beq	r2,zero,11fec <write+0x4c>
   11fc8:	deffff04 	addi	sp,sp,-4
   11fcc:	dfc00015 	stw	ra,0(sp)
   11fd0:	103ee83a 	callr	r2
   11fd4:	00c01444 	movi	r3,81
   11fd8:	10c00015 	stw	r3,0(r2)
   11fdc:	00bfffc4 	movi	r2,-1
   11fe0:	dfc00017 	ldw	ra,0(sp)
   11fe4:	dec00104 	addi	sp,sp,4
   11fe8:	f800283a 	ret
   11fec:	d0a0a704 	addi	r2,gp,-32100
   11ff0:	00c01444 	movi	r3,81
   11ff4:	10c00015 	stw	r3,0(r2)
   11ff8:	00bfffc4 	movi	r2,-1
   11ffc:	f800283a 	ret

00012000 <alt_irq_init>:
   12000:	deffff04 	addi	sp,sp,-4
   12004:	dfc00015 	stw	ra,0(sp)
   12008:	00123540 	call	12354 <altera_nios2_gen2_irq_init>
   1200c:	00800044 	movi	r2,1
   12010:	1001703a 	wrctl	status,r2
   12014:	dfc00017 	ldw	ra,0(sp)
   12018:	dec00104 	addi	sp,sp,4
   1201c:	f800283a 	ret

00012020 <alt_sys_init>:
   12020:	008000b4 	movhi	r2,2
   12024:	10840004 	addi	r2,r2,4096
   12028:	d0a0ad15 	stw	r2,-32076(gp)
   1202c:	01000074 	movhi	r4,1
   12030:	0080bef4 	movhi	r2,763
   12034:	10bc2004 	addi	r2,r2,-3968
   12038:	d1600504 	addi	r5,gp,-32748
   1203c:	210a3004 	addi	r4,r4,10432
   12040:	d0a0ac15 	stw	r2,-32080(gp)
   12044:	00122701 	jmpi	12270 <alt_dev_llist_insert>

00012048 <altera_avalon_jtag_uart_write>:
   12048:	21000017 	ldw	r4,0(r4)
   1204c:	3005883a 	mov	r2,r6
   12050:	298d883a 	add	r6,r5,r6
   12054:	21c00104 	addi	r7,r4,4
   12058:	2980072e 	bgeu	r5,r6,12078 <altera_avalon_jtag_uart_write+0x30>
   1205c:	38c00037 	ldwio	r3,0(r7)
   12060:	18ffffec 	andhi	r3,r3,65535
   12064:	183ffc26 	beq	r3,zero,12058 <__alt_data_end+0xffff2058>
   12068:	28c00007 	ldb	r3,0(r5)
   1206c:	20c00035 	stwio	r3,0(r4)
   12070:	29400044 	addi	r5,r5,1
   12074:	003ff806 	br	12058 <__alt_data_end+0xffff2058>
   12078:	f800283a 	ret

0001207c <alt_up_accelerometer_spi_open_dev>:
   1207c:	d1600504 	addi	r5,gp,-32748
   12080:	00122dc1 	jmpi	122dc <alt_find_dev>

00012084 <alt_up_accelerometer_spi_read_address_register>:
   12084:	20800a17 	ldw	r2,40(r4)
   12088:	10800023 	ldbuio	r2,0(r2)
   1208c:	28800005 	stb	r2,0(r5)
   12090:	0005883a 	mov	r2,zero
   12094:	f800283a 	ret

00012098 <alt_up_accelerometer_spi_read>:
   12098:	20800a17 	ldw	r2,40(r4)
   1209c:	29400fcc 	andi	r5,r5,63
   120a0:	11400025 	stbio	r5,0(r2)
   120a4:	20800a17 	ldw	r2,40(r4)
   120a8:	10800063 	ldbuio	r2,1(r2)
   120ac:	30800005 	stb	r2,0(r6)
   120b0:	0005883a 	mov	r2,zero
   120b4:	f800283a 	ret

000120b8 <alt_up_accelerometer_spi_write>:
   120b8:	20800a17 	ldw	r2,40(r4)
   120bc:	29400fcc 	andi	r5,r5,63
   120c0:	11400025 	stbio	r5,0(r2)
   120c4:	20800a17 	ldw	r2,40(r4)
   120c8:	11800065 	stbio	r6,1(r2)
   120cc:	0005883a 	mov	r2,zero
   120d0:	f800283a 	ret

000120d4 <alt_up_accelerometer_spi_read_x_axis>:
   120d4:	20800a17 	ldw	r2,40(r4)
   120d8:	00c00c84 	movi	r3,50
   120dc:	10c00025 	stbio	r3,0(r2)
   120e0:	20800a17 	ldw	r2,40(r4)
   120e4:	10800063 	ldbuio	r2,1(r2)
   120e8:	00c00cc4 	movi	r3,51
   120ec:	10803fcc 	andi	r2,r2,255
   120f0:	28800015 	stw	r2,0(r5)
   120f4:	20800a17 	ldw	r2,40(r4)
   120f8:	10c00025 	stbio	r3,0(r2)
   120fc:	20800a17 	ldw	r2,40(r4)
   12100:	10800063 	ldbuio	r2,1(r2)
   12104:	10803fcc 	andi	r2,r2,255
   12108:	1006923a 	slli	r3,r2,8
   1210c:	28800017 	ldw	r2,0(r5)
   12110:	1885883a 	add	r2,r3,r2
   12114:	10e0000c 	andi	r3,r2,32768
   12118:	18000126 	beq	r3,zero,12120 <alt_up_accelerometer_spi_read_x_axis+0x4c>
   1211c:	10bffff4 	orhi	r2,r2,65535
   12120:	28800015 	stw	r2,0(r5)
   12124:	0005883a 	mov	r2,zero
   12128:	f800283a 	ret

0001212c <alt_up_accelerometer_spi_read_y_axis>:
   1212c:	20800a17 	ldw	r2,40(r4)
   12130:	00c00d04 	movi	r3,52
   12134:	10c00025 	stbio	r3,0(r2)
   12138:	20800a17 	ldw	r2,40(r4)
   1213c:	10800063 	ldbuio	r2,1(r2)
   12140:	00c00d44 	movi	r3,53
   12144:	10803fcc 	andi	r2,r2,255
   12148:	28800015 	stw	r2,0(r5)
   1214c:	20800a17 	ldw	r2,40(r4)
   12150:	10c00025 	stbio	r3,0(r2)
   12154:	20800a17 	ldw	r2,40(r4)
   12158:	10800063 	ldbuio	r2,1(r2)
   1215c:	10803fcc 	andi	r2,r2,255
   12160:	1006923a 	slli	r3,r2,8
   12164:	28800017 	ldw	r2,0(r5)
   12168:	1885883a 	add	r2,r3,r2
   1216c:	10e0000c 	andi	r3,r2,32768
   12170:	18000126 	beq	r3,zero,12178 <alt_up_accelerometer_spi_read_y_axis+0x4c>
   12174:	10bffff4 	orhi	r2,r2,65535
   12178:	28800015 	stw	r2,0(r5)
   1217c:	0005883a 	mov	r2,zero
   12180:	f800283a 	ret

00012184 <alt_up_accelerometer_spi_read_z_axis>:
   12184:	20800a17 	ldw	r2,40(r4)
   12188:	00c00d84 	movi	r3,54
   1218c:	10c00025 	stbio	r3,0(r2)
   12190:	20800a17 	ldw	r2,40(r4)
   12194:	10800063 	ldbuio	r2,1(r2)
   12198:	00c00dc4 	movi	r3,55
   1219c:	10803fcc 	andi	r2,r2,255
   121a0:	28800015 	stw	r2,0(r5)
   121a4:	20800a17 	ldw	r2,40(r4)
   121a8:	10c00025 	stbio	r3,0(r2)
   121ac:	20800a17 	ldw	r2,40(r4)
   121b0:	10800063 	ldbuio	r2,1(r2)
   121b4:	10803fcc 	andi	r2,r2,255
   121b8:	1006923a 	slli	r3,r2,8
   121bc:	28800017 	ldw	r2,0(r5)
   121c0:	1885883a 	add	r2,r3,r2
   121c4:	10e0000c 	andi	r3,r2,32768
   121c8:	18000126 	beq	r3,zero,121d0 <alt_up_accelerometer_spi_read_z_axis+0x4c>
   121cc:	10bffff4 	orhi	r2,r2,65535
   121d0:	28800015 	stw	r2,0(r5)
   121d4:	0005883a 	mov	r2,zero
   121d8:	f800283a 	ret

000121dc <alt_busy_sleep>:
   121dc:	014666b4 	movhi	r5,6554
   121e0:	defffe04 	addi	sp,sp,-8
   121e4:	29666644 	addi	r5,r5,-26215
   121e8:	dc000015 	stw	r16,0(sp)
   121ec:	dfc00115 	stw	ra,4(sp)
   121f0:	2021883a 	mov	r16,r4
   121f4:	0011d400 	call	11d40 <__udivsi3>
   121f8:	10001026 	beq	r2,zero,1223c <alt_busy_sleep+0x60>
   121fc:	01600034 	movhi	r5,32768
   12200:	013999b4 	movhi	r4,58982
   12204:	0007883a 	mov	r3,zero
   12208:	297fffc4 	addi	r5,r5,-1
   1220c:	211999c4 	addi	r4,r4,26215
   12210:	297fffc4 	addi	r5,r5,-1
   12214:	283ffe1e 	bne	r5,zero,12210 <__alt_data_end+0xffff2210>
   12218:	18c00044 	addi	r3,r3,1
   1221c:	8121883a 	add	r16,r16,r4
   12220:	18bffb16 	blt	r3,r2,12210 <__alt_data_end+0xffff2210>
   12224:	01400144 	movi	r5,5
   12228:	8009883a 	mov	r4,r16
   1222c:	00114240 	call	11424 <__mulsi3>
   12230:	10bfffc4 	addi	r2,r2,-1
   12234:	103ffe1e 	bne	r2,zero,12230 <__alt_data_end+0xffff2230>
   12238:	00000506 	br	12250 <alt_busy_sleep+0x74>
   1223c:	01400144 	movi	r5,5
   12240:	8009883a 	mov	r4,r16
   12244:	00114240 	call	11424 <__mulsi3>
   12248:	10bfffc4 	addi	r2,r2,-1
   1224c:	00bffe16 	blt	zero,r2,12248 <__alt_data_end+0xffff2248>
   12250:	0005883a 	mov	r2,zero
   12254:	dfc00117 	ldw	ra,4(sp)
   12258:	dc000017 	ldw	r16,0(sp)
   1225c:	dec00204 	addi	sp,sp,8
   12260:	f800283a 	ret

00012264 <alt_dcache_flush_all>:
   12264:	f800283a 	ret

00012268 <alt_dev_null_write>:
   12268:	3005883a 	mov	r2,r6
   1226c:	f800283a 	ret

00012270 <alt_dev_llist_insert>:
   12270:	20000226 	beq	r4,zero,1227c <alt_dev_llist_insert+0xc>
   12274:	20800217 	ldw	r2,8(r4)
   12278:	1000101e 	bne	r2,zero,122bc <alt_dev_llist_insert+0x4c>
   1227c:	d0a00917 	ldw	r2,-32732(gp)
   12280:	10000926 	beq	r2,zero,122a8 <alt_dev_llist_insert+0x38>
   12284:	deffff04 	addi	sp,sp,-4
   12288:	dfc00015 	stw	ra,0(sp)
   1228c:	103ee83a 	callr	r2
   12290:	00c00584 	movi	r3,22
   12294:	10c00015 	stw	r3,0(r2)
   12298:	00bffa84 	movi	r2,-22
   1229c:	dfc00017 	ldw	ra,0(sp)
   122a0:	dec00104 	addi	sp,sp,4
   122a4:	f800283a 	ret
   122a8:	d0a0a704 	addi	r2,gp,-32100
   122ac:	00c00584 	movi	r3,22
   122b0:	10c00015 	stw	r3,0(r2)
   122b4:	00bffa84 	movi	r2,-22
   122b8:	f800283a 	ret
   122bc:	28800017 	ldw	r2,0(r5)
   122c0:	21400115 	stw	r5,4(r4)
   122c4:	20800015 	stw	r2,0(r4)
   122c8:	28800017 	ldw	r2,0(r5)
   122cc:	11000115 	stw	r4,4(r2)
   122d0:	29000015 	stw	r4,0(r5)
   122d4:	0005883a 	mov	r2,zero
   122d8:	f800283a 	ret

000122dc <alt_find_dev>:
   122dc:	defffb04 	addi	sp,sp,-20
   122e0:	dcc00315 	stw	r19,12(sp)
   122e4:	dc800215 	stw	r18,8(sp)
   122e8:	dc400115 	stw	r17,4(sp)
   122ec:	dc000015 	stw	r16,0(sp)
   122f0:	dfc00415 	stw	ra,16(sp)
   122f4:	2027883a 	mov	r19,r4
   122f8:	2823883a 	mov	r17,r5
   122fc:	2c000017 	ldw	r16,0(r5)
   12300:	00115680 	call	11568 <strlen>
   12304:	14800044 	addi	r18,r2,1
   12308:	84400726 	beq	r16,r17,12328 <alt_find_dev+0x4c>
   1230c:	81000217 	ldw	r4,8(r16)
   12310:	900d883a 	mov	r6,r18
   12314:	980b883a 	mov	r5,r19
   12318:	00123d00 	call	123d0 <memcmp>
   1231c:	10000426 	beq	r2,zero,12330 <alt_find_dev+0x54>
   12320:	84000017 	ldw	r16,0(r16)
   12324:	003ff806 	br	12308 <__alt_data_end+0xffff2308>
   12328:	0005883a 	mov	r2,zero
   1232c:	00000106 	br	12334 <alt_find_dev+0x58>
   12330:	8005883a 	mov	r2,r16
   12334:	dfc00417 	ldw	ra,16(sp)
   12338:	dcc00317 	ldw	r19,12(sp)
   1233c:	dc800217 	ldw	r18,8(sp)
   12340:	dc400117 	ldw	r17,4(sp)
   12344:	dc000017 	ldw	r16,0(sp)
   12348:	dec00504 	addi	sp,sp,20
   1234c:	f800283a 	ret

00012350 <alt_icache_flush_all>:
   12350:	f800283a 	ret

00012354 <altera_nios2_gen2_irq_init>:
   12354:	000170fa 	wrctl	ienable,zero
   12358:	f800283a 	ret

0001235c <alt_exception_cause_generated_bad_addr>:
   1235c:	213ffe84 	addi	r4,r4,-6
   12360:	008003c4 	movi	r2,15
   12364:	11001636 	bltu	r2,r4,123c0 <alt_exception_cause_generated_bad_addr+0x64>
   12368:	200890ba 	slli	r4,r4,2
   1236c:	00800074 	movhi	r2,1
   12370:	1088e004 	addi	r2,r2,9088
   12374:	2089883a 	add	r4,r4,r2
   12378:	20800017 	ldw	r2,0(r4)
   1237c:	1000683a 	jmp	r2
   12380:	000123c8 	cmpgei	zero,zero,1167
   12384:	000123c8 	cmpgei	zero,zero,1167
   12388:	000123c0 	call	123c <__alt_mem_onchip_memory-0xedc4>
   1238c:	000123c0 	call	123c <__alt_mem_onchip_memory-0xedc4>
   12390:	000123c0 	call	123c <__alt_mem_onchip_memory-0xedc4>
   12394:	000123c8 	cmpgei	zero,zero,1167
   12398:	000123c0 	call	123c <__alt_mem_onchip_memory-0xedc4>
   1239c:	000123c0 	call	123c <__alt_mem_onchip_memory-0xedc4>
   123a0:	000123c8 	cmpgei	zero,zero,1167
   123a4:	000123c8 	cmpgei	zero,zero,1167
   123a8:	000123c0 	call	123c <__alt_mem_onchip_memory-0xedc4>
   123ac:	000123c8 	cmpgei	zero,zero,1167
   123b0:	000123c0 	call	123c <__alt_mem_onchip_memory-0xedc4>
   123b4:	000123c0 	call	123c <__alt_mem_onchip_memory-0xedc4>
   123b8:	000123c0 	call	123c <__alt_mem_onchip_memory-0xedc4>
   123bc:	000123c8 	cmpgei	zero,zero,1167
   123c0:	0005883a 	mov	r2,zero
   123c4:	f800283a 	ret
   123c8:	00800044 	movi	r2,1
   123cc:	f800283a 	ret

000123d0 <memcmp>:
   123d0:	218d883a 	add	r6,r4,r6
   123d4:	21800826 	beq	r4,r6,123f8 <memcmp+0x28>
   123d8:	20800003 	ldbu	r2,0(r4)
   123dc:	28c00003 	ldbu	r3,0(r5)
   123e0:	10c00226 	beq	r2,r3,123ec <memcmp+0x1c>
   123e4:	10c5c83a 	sub	r2,r2,r3
   123e8:	f800283a 	ret
   123ec:	21000044 	addi	r4,r4,1
   123f0:	29400044 	addi	r5,r5,1
   123f4:	003ff706 	br	123d4 <__alt_data_end+0xffff23d4>
   123f8:	0005883a 	mov	r2,zero
   123fc:	f800283a 	ret
